// Code generated by ent, DO NOT EDIT.

package documenttype

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the documenttype type in the database.
	Label = "document_type"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// Table holds the table name of the documenttype in the database.
	Table = "document_types"
)

// Columns holds all SQL columns for documenttype fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldName,
	FieldDescription,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "document_types"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"metadata_document_types",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeOTHER       Type = "OTHER"
	TypeDESIGN      Type = "DESIGN"
	TypeSOURCE      Type = "SOURCE"
	TypeBUILD       Type = "BUILD"
	TypeANALYZED    Type = "ANALYZED"
	TypeDEPLOYED    Type = "DEPLOYED"
	TypeRUNTIME     Type = "RUNTIME"
	TypeDISCOVERY   Type = "DISCOVERY"
	TypeDECOMISSION Type = "DECOMISSION"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeOTHER, TypeDESIGN, TypeSOURCE, TypeBUILD, TypeANALYZED, TypeDEPLOYED, TypeRUNTIME, TypeDISCOVERY, TypeDECOMISSION:
		return nil
	default:
		return fmt.Errorf("documenttype: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the DocumentType queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}
