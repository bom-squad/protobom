// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bom-squad/protobom/pkg/sbom/ent/documenttype"
)

// DocumentTypeCreate is the builder for creating a DocumentType entity.
type DocumentTypeCreate struct {
	config
	mutation *DocumentTypeMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (dtc *DocumentTypeCreate) SetType(d documenttype.Type) *DocumentTypeCreate {
	dtc.mutation.SetType(d)
	return dtc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (dtc *DocumentTypeCreate) SetNillableType(d *documenttype.Type) *DocumentTypeCreate {
	if d != nil {
		dtc.SetType(*d)
	}
	return dtc
}

// SetName sets the "name" field.
func (dtc *DocumentTypeCreate) SetName(s string) *DocumentTypeCreate {
	dtc.mutation.SetName(s)
	return dtc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (dtc *DocumentTypeCreate) SetNillableName(s *string) *DocumentTypeCreate {
	if s != nil {
		dtc.SetName(*s)
	}
	return dtc
}

// SetDescription sets the "description" field.
func (dtc *DocumentTypeCreate) SetDescription(s string) *DocumentTypeCreate {
	dtc.mutation.SetDescription(s)
	return dtc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (dtc *DocumentTypeCreate) SetNillableDescription(s *string) *DocumentTypeCreate {
	if s != nil {
		dtc.SetDescription(*s)
	}
	return dtc
}

// Mutation returns the DocumentTypeMutation object of the builder.
func (dtc *DocumentTypeCreate) Mutation() *DocumentTypeMutation {
	return dtc.mutation
}

// Save creates the DocumentType in the database.
func (dtc *DocumentTypeCreate) Save(ctx context.Context) (*DocumentType, error) {
	return withHooks(ctx, dtc.sqlSave, dtc.mutation, dtc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dtc *DocumentTypeCreate) SaveX(ctx context.Context) *DocumentType {
	v, err := dtc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dtc *DocumentTypeCreate) Exec(ctx context.Context) error {
	_, err := dtc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtc *DocumentTypeCreate) ExecX(ctx context.Context) {
	if err := dtc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dtc *DocumentTypeCreate) check() error {
	if v, ok := dtc.mutation.GetType(); ok {
		if err := documenttype.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "DocumentType.type": %w`, err)}
		}
	}
	return nil
}

func (dtc *DocumentTypeCreate) sqlSave(ctx context.Context) (*DocumentType, error) {
	if err := dtc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dtc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dtc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dtc.mutation.id = &_node.ID
	dtc.mutation.done = true
	return _node, nil
}

func (dtc *DocumentTypeCreate) createSpec() (*DocumentType, *sqlgraph.CreateSpec) {
	var (
		_node = &DocumentType{config: dtc.config}
		_spec = sqlgraph.NewCreateSpec(documenttype.Table, sqlgraph.NewFieldSpec(documenttype.FieldID, field.TypeInt))
	)
	if value, ok := dtc.mutation.GetType(); ok {
		_spec.SetField(documenttype.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := dtc.mutation.Name(); ok {
		_spec.SetField(documenttype.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dtc.mutation.Description(); ok {
		_spec.SetField(documenttype.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	return _node, _spec
}

// DocumentTypeCreateBulk is the builder for creating many DocumentType entities in bulk.
type DocumentTypeCreateBulk struct {
	config
	err      error
	builders []*DocumentTypeCreate
}

// Save creates the DocumentType entities in the database.
func (dtcb *DocumentTypeCreateBulk) Save(ctx context.Context) ([]*DocumentType, error) {
	if dtcb.err != nil {
		return nil, dtcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dtcb.builders))
	nodes := make([]*DocumentType, len(dtcb.builders))
	mutators := make([]Mutator, len(dtcb.builders))
	for i := range dtcb.builders {
		func(i int, root context.Context) {
			builder := dtcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DocumentTypeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dtcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dtcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dtcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dtcb *DocumentTypeCreateBulk) SaveX(ctx context.Context) []*DocumentType {
	v, err := dtcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dtcb *DocumentTypeCreateBulk) Exec(ctx context.Context) error {
	_, err := dtcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dtcb *DocumentTypeCreateBulk) ExecX(ctx context.Context) {
	if err := dtcb.Exec(ctx); err != nil {
		panic(err)
	}
}
