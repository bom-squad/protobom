// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bom-squad/protobom/pkg/sbom/ent/externalreference"
	"github.com/bom-squad/protobom/pkg/sbom/ent/hashesentry"
	"github.com/bom-squad/protobom/pkg/sbom/ent/identifiersentry"
	"github.com/bom-squad/protobom/pkg/sbom/ent/node"
	"github.com/bom-squad/protobom/pkg/sbom/ent/person"
	"github.com/bom-squad/protobom/pkg/sbom/ent/timestamp"
)

// NodeCreate is the builder for creating a Node entity.
type NodeCreate struct {
	config
	mutation *NodeMutation
	hooks    []Hook
}

// SetType sets the "type" field.
func (nc *NodeCreate) SetType(n node.Type) *NodeCreate {
	nc.mutation.SetType(n)
	return nc
}

// SetName sets the "name" field.
func (nc *NodeCreate) SetName(s string) *NodeCreate {
	nc.mutation.SetName(s)
	return nc
}

// SetVersion sets the "version" field.
func (nc *NodeCreate) SetVersion(s string) *NodeCreate {
	nc.mutation.SetVersion(s)
	return nc
}

// SetFileName sets the "file_name" field.
func (nc *NodeCreate) SetFileName(s string) *NodeCreate {
	nc.mutation.SetFileName(s)
	return nc
}

// SetURLHome sets the "url_home" field.
func (nc *NodeCreate) SetURLHome(s string) *NodeCreate {
	nc.mutation.SetURLHome(s)
	return nc
}

// SetURLDownload sets the "url_download" field.
func (nc *NodeCreate) SetURLDownload(s string) *NodeCreate {
	nc.mutation.SetURLDownload(s)
	return nc
}

// SetLicenses sets the "licenses" field.
func (nc *NodeCreate) SetLicenses(s string) *NodeCreate {
	nc.mutation.SetLicenses(s)
	return nc
}

// SetLicenseConcluded sets the "license_concluded" field.
func (nc *NodeCreate) SetLicenseConcluded(s string) *NodeCreate {
	nc.mutation.SetLicenseConcluded(s)
	return nc
}

// SetLicenseComments sets the "license_comments" field.
func (nc *NodeCreate) SetLicenseComments(s string) *NodeCreate {
	nc.mutation.SetLicenseComments(s)
	return nc
}

// SetCopyright sets the "copyright" field.
func (nc *NodeCreate) SetCopyright(s string) *NodeCreate {
	nc.mutation.SetCopyright(s)
	return nc
}

// SetSourceInfo sets the "source_info" field.
func (nc *NodeCreate) SetSourceInfo(s string) *NodeCreate {
	nc.mutation.SetSourceInfo(s)
	return nc
}

// SetComment sets the "comment" field.
func (nc *NodeCreate) SetComment(s string) *NodeCreate {
	nc.mutation.SetComment(s)
	return nc
}

// SetSummary sets the "summary" field.
func (nc *NodeCreate) SetSummary(s string) *NodeCreate {
	nc.mutation.SetSummary(s)
	return nc
}

// SetDescription sets the "description" field.
func (nc *NodeCreate) SetDescription(s string) *NodeCreate {
	nc.mutation.SetDescription(s)
	return nc
}

// SetAttribution sets the "attribution" field.
func (nc *NodeCreate) SetAttribution(s string) *NodeCreate {
	nc.mutation.SetAttribution(s)
	return nc
}

// SetFileTypes sets the "file_types" field.
func (nc *NodeCreate) SetFileTypes(s string) *NodeCreate {
	nc.mutation.SetFileTypes(s)
	return nc
}

// SetPrimaryPurpose sets the "primary_purpose" field.
func (nc *NodeCreate) SetPrimaryPurpose(np node.PrimaryPurpose) *NodeCreate {
	nc.mutation.SetPrimaryPurpose(np)
	return nc
}

// SetID sets the "id" field.
func (nc *NodeCreate) SetID(s string) *NodeCreate {
	nc.mutation.SetID(s)
	return nc
}

// AddSupplierIDs adds the "suppliers" edge to the Person entity by IDs.
func (nc *NodeCreate) AddSupplierIDs(ids ...int) *NodeCreate {
	nc.mutation.AddSupplierIDs(ids...)
	return nc
}

// AddSuppliers adds the "suppliers" edges to the Person entity.
func (nc *NodeCreate) AddSuppliers(p ...*Person) *NodeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nc.AddSupplierIDs(ids...)
}

// AddOriginatorIDs adds the "originators" edge to the Person entity by IDs.
func (nc *NodeCreate) AddOriginatorIDs(ids ...int) *NodeCreate {
	nc.mutation.AddOriginatorIDs(ids...)
	return nc
}

// AddOriginators adds the "originators" edges to the Person entity.
func (nc *NodeCreate) AddOriginators(p ...*Person) *NodeCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nc.AddOriginatorIDs(ids...)
}

// AddExternalReferenceIDs adds the "external_references" edge to the ExternalReference entity by IDs.
func (nc *NodeCreate) AddExternalReferenceIDs(ids ...int) *NodeCreate {
	nc.mutation.AddExternalReferenceIDs(ids...)
	return nc
}

// AddExternalReferences adds the "external_references" edges to the ExternalReference entity.
func (nc *NodeCreate) AddExternalReferences(e ...*ExternalReference) *NodeCreate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nc.AddExternalReferenceIDs(ids...)
}

// AddIdentifierIDs adds the "identifiers" edge to the IdentifiersEntry entity by IDs.
func (nc *NodeCreate) AddIdentifierIDs(ids ...int) *NodeCreate {
	nc.mutation.AddIdentifierIDs(ids...)
	return nc
}

// AddIdentifiers adds the "identifiers" edges to the IdentifiersEntry entity.
func (nc *NodeCreate) AddIdentifiers(i ...*IdentifiersEntry) *NodeCreate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nc.AddIdentifierIDs(ids...)
}

// AddHashIDs adds the "hashes" edge to the HashesEntry entity by IDs.
func (nc *NodeCreate) AddHashIDs(ids ...int) *NodeCreate {
	nc.mutation.AddHashIDs(ids...)
	return nc
}

// AddHashes adds the "hashes" edges to the HashesEntry entity.
func (nc *NodeCreate) AddHashes(h ...*HashesEntry) *NodeCreate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return nc.AddHashIDs(ids...)
}

// AddReleaseDateIDs adds the "release_date" edge to the Timestamp entity by IDs.
func (nc *NodeCreate) AddReleaseDateIDs(ids ...int) *NodeCreate {
	nc.mutation.AddReleaseDateIDs(ids...)
	return nc
}

// AddReleaseDate adds the "release_date" edges to the Timestamp entity.
func (nc *NodeCreate) AddReleaseDate(t ...*Timestamp) *NodeCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nc.AddReleaseDateIDs(ids...)
}

// AddBuildDateIDs adds the "build_date" edge to the Timestamp entity by IDs.
func (nc *NodeCreate) AddBuildDateIDs(ids ...int) *NodeCreate {
	nc.mutation.AddBuildDateIDs(ids...)
	return nc
}

// AddBuildDate adds the "build_date" edges to the Timestamp entity.
func (nc *NodeCreate) AddBuildDate(t ...*Timestamp) *NodeCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nc.AddBuildDateIDs(ids...)
}

// AddValidUntilDateIDs adds the "valid_until_date" edge to the Timestamp entity by IDs.
func (nc *NodeCreate) AddValidUntilDateIDs(ids ...int) *NodeCreate {
	nc.mutation.AddValidUntilDateIDs(ids...)
	return nc
}

// AddValidUntilDate adds the "valid_until_date" edges to the Timestamp entity.
func (nc *NodeCreate) AddValidUntilDate(t ...*Timestamp) *NodeCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nc.AddValidUntilDateIDs(ids...)
}

// Mutation returns the NodeMutation object of the builder.
func (nc *NodeCreate) Mutation() *NodeMutation {
	return nc.mutation
}

// Save creates the Node in the database.
func (nc *NodeCreate) Save(ctx context.Context) (*Node, error) {
	return withHooks(ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NodeCreate) SaveX(ctx context.Context) *Node {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NodeCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NodeCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NodeCreate) check() error {
	if _, ok := nc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Node.type"`)}
	}
	if v, ok := nc.mutation.GetType(); ok {
		if err := node.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Node.type": %w`, err)}
		}
	}
	if _, ok := nc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Node.name"`)}
	}
	if _, ok := nc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "Node.version"`)}
	}
	if _, ok := nc.mutation.FileName(); !ok {
		return &ValidationError{Name: "file_name", err: errors.New(`ent: missing required field "Node.file_name"`)}
	}
	if _, ok := nc.mutation.URLHome(); !ok {
		return &ValidationError{Name: "url_home", err: errors.New(`ent: missing required field "Node.url_home"`)}
	}
	if _, ok := nc.mutation.URLDownload(); !ok {
		return &ValidationError{Name: "url_download", err: errors.New(`ent: missing required field "Node.url_download"`)}
	}
	if _, ok := nc.mutation.Licenses(); !ok {
		return &ValidationError{Name: "licenses", err: errors.New(`ent: missing required field "Node.licenses"`)}
	}
	if _, ok := nc.mutation.LicenseConcluded(); !ok {
		return &ValidationError{Name: "license_concluded", err: errors.New(`ent: missing required field "Node.license_concluded"`)}
	}
	if _, ok := nc.mutation.LicenseComments(); !ok {
		return &ValidationError{Name: "license_comments", err: errors.New(`ent: missing required field "Node.license_comments"`)}
	}
	if _, ok := nc.mutation.Copyright(); !ok {
		return &ValidationError{Name: "copyright", err: errors.New(`ent: missing required field "Node.copyright"`)}
	}
	if _, ok := nc.mutation.SourceInfo(); !ok {
		return &ValidationError{Name: "source_info", err: errors.New(`ent: missing required field "Node.source_info"`)}
	}
	if _, ok := nc.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "Node.comment"`)}
	}
	if _, ok := nc.mutation.Summary(); !ok {
		return &ValidationError{Name: "summary", err: errors.New(`ent: missing required field "Node.summary"`)}
	}
	if _, ok := nc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Node.description"`)}
	}
	if _, ok := nc.mutation.Attribution(); !ok {
		return &ValidationError{Name: "attribution", err: errors.New(`ent: missing required field "Node.attribution"`)}
	}
	if _, ok := nc.mutation.FileTypes(); !ok {
		return &ValidationError{Name: "file_types", err: errors.New(`ent: missing required field "Node.file_types"`)}
	}
	if _, ok := nc.mutation.PrimaryPurpose(); !ok {
		return &ValidationError{Name: "primary_purpose", err: errors.New(`ent: missing required field "Node.primary_purpose"`)}
	}
	if v, ok := nc.mutation.PrimaryPurpose(); ok {
		if err := node.PrimaryPurposeValidator(v); err != nil {
			return &ValidationError{Name: "primary_purpose", err: fmt.Errorf(`ent: validator failed for field "Node.primary_purpose": %w`, err)}
		}
	}
	return nil
}

func (nc *NodeCreate) sqlSave(ctx context.Context) (*Node, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Node.ID type: %T", _spec.ID.Value)
		}
	}
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NodeCreate) createSpec() (*Node, *sqlgraph.CreateSpec) {
	var (
		_node = &Node{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(node.Table, sqlgraph.NewFieldSpec(node.FieldID, field.TypeString))
	)
	if id, ok := nc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nc.mutation.GetType(); ok {
		_spec.SetField(node.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := nc.mutation.Name(); ok {
		_spec.SetField(node.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := nc.mutation.Version(); ok {
		_spec.SetField(node.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := nc.mutation.FileName(); ok {
		_spec.SetField(node.FieldFileName, field.TypeString, value)
		_node.FileName = value
	}
	if value, ok := nc.mutation.URLHome(); ok {
		_spec.SetField(node.FieldURLHome, field.TypeString, value)
		_node.URLHome = value
	}
	if value, ok := nc.mutation.URLDownload(); ok {
		_spec.SetField(node.FieldURLDownload, field.TypeString, value)
		_node.URLDownload = value
	}
	if value, ok := nc.mutation.Licenses(); ok {
		_spec.SetField(node.FieldLicenses, field.TypeString, value)
		_node.Licenses = value
	}
	if value, ok := nc.mutation.LicenseConcluded(); ok {
		_spec.SetField(node.FieldLicenseConcluded, field.TypeString, value)
		_node.LicenseConcluded = value
	}
	if value, ok := nc.mutation.LicenseComments(); ok {
		_spec.SetField(node.FieldLicenseComments, field.TypeString, value)
		_node.LicenseComments = value
	}
	if value, ok := nc.mutation.Copyright(); ok {
		_spec.SetField(node.FieldCopyright, field.TypeString, value)
		_node.Copyright = value
	}
	if value, ok := nc.mutation.SourceInfo(); ok {
		_spec.SetField(node.FieldSourceInfo, field.TypeString, value)
		_node.SourceInfo = value
	}
	if value, ok := nc.mutation.Comment(); ok {
		_spec.SetField(node.FieldComment, field.TypeString, value)
		_node.Comment = value
	}
	if value, ok := nc.mutation.Summary(); ok {
		_spec.SetField(node.FieldSummary, field.TypeString, value)
		_node.Summary = value
	}
	if value, ok := nc.mutation.Description(); ok {
		_spec.SetField(node.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := nc.mutation.Attribution(); ok {
		_spec.SetField(node.FieldAttribution, field.TypeString, value)
		_node.Attribution = value
	}
	if value, ok := nc.mutation.FileTypes(); ok {
		_spec.SetField(node.FieldFileTypes, field.TypeString, value)
		_node.FileTypes = value
	}
	if value, ok := nc.mutation.PrimaryPurpose(); ok {
		_spec.SetField(node.FieldPrimaryPurpose, field.TypeEnum, value)
		_node.PrimaryPurpose = value
	}
	if nodes := nc.mutation.SuppliersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.SuppliersTable,
			Columns: []string{node.SuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.OriginatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.OriginatorsTable,
			Columns: []string{node.OriginatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.ExternalReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ExternalReferencesTable,
			Columns: []string{node.ExternalReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.IdentifiersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.IdentifiersTable,
			Columns: []string{node.IdentifiersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identifiersentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.HashesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.HashesTable,
			Columns: []string{node.HashesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashesentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.ReleaseDateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ReleaseDateTable,
			Columns: []string{node.ReleaseDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.BuildDateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.BuildDateTable,
			Columns: []string{node.BuildDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.ValidUntilDateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.ValidUntilDateTable,
			Columns: []string{node.ValidUntilDateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(timestamp.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NodeCreateBulk is the builder for creating many Node entities in bulk.
type NodeCreateBulk struct {
	config
	err      error
	builders []*NodeCreate
}

// Save creates the Node entities in the database.
func (ncb *NodeCreateBulk) Save(ctx context.Context) ([]*Node, error) {
	if ncb.err != nil {
		return nil, ncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Node, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NodeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NodeCreateBulk) SaveX(ctx context.Context) []*Node {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NodeCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NodeCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}
