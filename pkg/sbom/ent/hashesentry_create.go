// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bom-squad/protobom/pkg/sbom/ent/hashesentry"
)

// HashesEntryCreate is the builder for creating a HashesEntry entity.
type HashesEntryCreate struct {
	config
	mutation *HashesEntryMutation
	hooks    []Hook
}

// SetHashAlgorithmType sets the "hash_algorithm_type" field.
func (hec *HashesEntryCreate) SetHashAlgorithmType(hat hashesentry.HashAlgorithmType) *HashesEntryCreate {
	hec.mutation.SetHashAlgorithmType(hat)
	return hec
}

// SetHashData sets the "hash_data" field.
func (hec *HashesEntryCreate) SetHashData(s string) *HashesEntryCreate {
	hec.mutation.SetHashData(s)
	return hec
}

// Mutation returns the HashesEntryMutation object of the builder.
func (hec *HashesEntryCreate) Mutation() *HashesEntryMutation {
	return hec.mutation
}

// Save creates the HashesEntry in the database.
func (hec *HashesEntryCreate) Save(ctx context.Context) (*HashesEntry, error) {
	return withHooks(ctx, hec.sqlSave, hec.mutation, hec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (hec *HashesEntryCreate) SaveX(ctx context.Context) *HashesEntry {
	v, err := hec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hec *HashesEntryCreate) Exec(ctx context.Context) error {
	_, err := hec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hec *HashesEntryCreate) ExecX(ctx context.Context) {
	if err := hec.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (hec *HashesEntryCreate) check() error {
	if _, ok := hec.mutation.HashAlgorithmType(); !ok {
		return &ValidationError{Name: "hash_algorithm_type", err: errors.New(`ent: missing required field "HashesEntry.hash_algorithm_type"`)}
	}
	if v, ok := hec.mutation.HashAlgorithmType(); ok {
		if err := hashesentry.HashAlgorithmTypeValidator(v); err != nil {
			return &ValidationError{Name: "hash_algorithm_type", err: fmt.Errorf(`ent: validator failed for field "HashesEntry.hash_algorithm_type": %w`, err)}
		}
	}
	if _, ok := hec.mutation.HashData(); !ok {
		return &ValidationError{Name: "hash_data", err: errors.New(`ent: missing required field "HashesEntry.hash_data"`)}
	}
	return nil
}

func (hec *HashesEntryCreate) sqlSave(ctx context.Context) (*HashesEntry, error) {
	if err := hec.check(); err != nil {
		return nil, err
	}
	_node, _spec := hec.createSpec()
	if err := sqlgraph.CreateNode(ctx, hec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	hec.mutation.id = &_node.ID
	hec.mutation.done = true
	return _node, nil
}

func (hec *HashesEntryCreate) createSpec() (*HashesEntry, *sqlgraph.CreateSpec) {
	var (
		_node = &HashesEntry{config: hec.config}
		_spec = sqlgraph.NewCreateSpec(hashesentry.Table, sqlgraph.NewFieldSpec(hashesentry.FieldID, field.TypeInt))
	)
	if value, ok := hec.mutation.HashAlgorithmType(); ok {
		_spec.SetField(hashesentry.FieldHashAlgorithmType, field.TypeEnum, value)
		_node.HashAlgorithmType = value
	}
	if value, ok := hec.mutation.HashData(); ok {
		_spec.SetField(hashesentry.FieldHashData, field.TypeString, value)
		_node.HashData = value
	}
	return _node, _spec
}

// HashesEntryCreateBulk is the builder for creating many HashesEntry entities in bulk.
type HashesEntryCreateBulk struct {
	config
	err      error
	builders []*HashesEntryCreate
}

// Save creates the HashesEntry entities in the database.
func (hecb *HashesEntryCreateBulk) Save(ctx context.Context) ([]*HashesEntry, error) {
	if hecb.err != nil {
		return nil, hecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(hecb.builders))
	nodes := make([]*HashesEntry, len(hecb.builders))
	mutators := make([]Mutator, len(hecb.builders))
	for i := range hecb.builders {
		func(i int, root context.Context) {
			builder := hecb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*HashesEntryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, hecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, hecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, hecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (hecb *HashesEntryCreateBulk) SaveX(ctx context.Context) []*HashesEntry {
	v, err := hecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (hecb *HashesEntryCreateBulk) Exec(ctx context.Context) error {
	_, err := hecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (hecb *HashesEntryCreateBulk) ExecX(ctx context.Context) {
	if err := hecb.Exec(ctx); err != nil {
		panic(err)
	}
}
