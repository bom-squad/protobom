// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: api/cdx/bom-1.3.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Classification int32

const (
	Classification_CLASSIFICATION_NULL Classification = 0
	// A software application. Refer to https://en.wikipedia.org/wiki/Application_software for information about applications.
	Classification_CLASSIFICATION_APPLICATION Classification = 1
	// A software framework. Refer to https://en.wikipedia.org/wiki/Software_framework for information on how frameworks vary slightly from libraries.
	Classification_CLASSIFICATION_FRAMEWORK Classification = 2
	// A software library. Refer to https://en.wikipedia.org/wiki/Library_(computing) for information about libraries. All third-party and open source reusable components will likely be a library. If the library also has key features of a framework, then it should be classified as a framework. If not, or is unknown, then specifying library is recommended.
	Classification_CLASSIFICATION_LIBRARY Classification = 3
	// A software operating system without regard to deployment model (i.e. installed on physical hardware, virtual machine, image, etc) Refer to https://en.wikipedia.org/wiki/Operating_system
	Classification_CLASSIFICATION_OPERATING_SYSTEM Classification = 4
	// A hardware device such as a processor, or chip-set. A hardware device containing firmware should include a component for the physical hardware itself, and another component of type 'firmware' or 'operating-system' (whichever is relevant), describing information about the software running on the device. See also the list of known device properties: https://github.com/CycloneDX/cyclonedx-property-taxonomy/blob/main/cdx/device.md
	Classification_CLASSIFICATION_DEVICE Classification = 5
	// A computer file. Refer to https://en.wikipedia.org/wiki/Computer_file for information about files.
	Classification_CLASSIFICATION_FILE Classification = 6
	// A packaging and/or runtime format, not specific to any particular technology, which isolates software inside the container from software outside of a container through virtualization technology. Refer to https://en.wikipedia.org/wiki/OS-level_virtualization
	Classification_CLASSIFICATION_CONTAINER Classification = 7
	// A special type of software that provides low-level control over a devices hardware. Refer to https://en.wikipedia.org/wiki/Firmware
	Classification_CLASSIFICATION_FIRMWARE Classification = 8
)

// Enum value maps for Classification.
var (
	Classification_name = map[int32]string{
		0: "CLASSIFICATION_NULL",
		1: "CLASSIFICATION_APPLICATION",
		2: "CLASSIFICATION_FRAMEWORK",
		3: "CLASSIFICATION_LIBRARY",
		4: "CLASSIFICATION_OPERATING_SYSTEM",
		5: "CLASSIFICATION_DEVICE",
		6: "CLASSIFICATION_FILE",
		7: "CLASSIFICATION_CONTAINER",
		8: "CLASSIFICATION_FIRMWARE",
	}
	Classification_value = map[string]int32{
		"CLASSIFICATION_NULL":             0,
		"CLASSIFICATION_APPLICATION":      1,
		"CLASSIFICATION_FRAMEWORK":        2,
		"CLASSIFICATION_LIBRARY":          3,
		"CLASSIFICATION_OPERATING_SYSTEM": 4,
		"CLASSIFICATION_DEVICE":           5,
		"CLASSIFICATION_FILE":             6,
		"CLASSIFICATION_CONTAINER":        7,
		"CLASSIFICATION_FIRMWARE":         8,
	}
)

func (x Classification) Enum() *Classification {
	p := new(Classification)
	*p = x
	return p
}

func (x Classification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Classification) Descriptor() protoreflect.EnumDescriptor {
	return file_api_cdx_bom_1_3_proto_enumTypes[0].Descriptor()
}

func (Classification) Type() protoreflect.EnumType {
	return &file_api_cdx_bom_1_3_proto_enumTypes[0]
}

func (x Classification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Classification.Descriptor instead.
func (Classification) EnumDescriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{0}
}

// Specifies the flow direction of the data. Valid values are: inbound, outbound, bi-directional, and unknown. Direction is relative to the service. Inbound flow states that data enters the service. Outbound flow states that data leaves the service. Bi-directional states that data flows both ways, and unknown states that the direction is not known.
type DataFlow int32

const (
	DataFlow_DATA_FLOW_NULL           DataFlow = 0
	DataFlow_DATA_FLOW_INBOUND        DataFlow = 1
	DataFlow_DATA_FLOW_OUTBOUND       DataFlow = 2
	DataFlow_DATA_FLOW_BI_DIRECTIONAL DataFlow = 3
	DataFlow_DATA_FLOW_UNKNOWN        DataFlow = 4
)

// Enum value maps for DataFlow.
var (
	DataFlow_name = map[int32]string{
		0: "DATA_FLOW_NULL",
		1: "DATA_FLOW_INBOUND",
		2: "DATA_FLOW_OUTBOUND",
		3: "DATA_FLOW_BI_DIRECTIONAL",
		4: "DATA_FLOW_UNKNOWN",
	}
	DataFlow_value = map[string]int32{
		"DATA_FLOW_NULL":           0,
		"DATA_FLOW_INBOUND":        1,
		"DATA_FLOW_OUTBOUND":       2,
		"DATA_FLOW_BI_DIRECTIONAL": 3,
		"DATA_FLOW_UNKNOWN":        4,
	}
)

func (x DataFlow) Enum() *DataFlow {
	p := new(DataFlow)
	*p = x
	return p
}

func (x DataFlow) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataFlow) Descriptor() protoreflect.EnumDescriptor {
	return file_api_cdx_bom_1_3_proto_enumTypes[1].Descriptor()
}

func (DataFlow) Type() protoreflect.EnumType {
	return &file_api_cdx_bom_1_3_proto_enumTypes[1]
}

func (x DataFlow) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataFlow.Descriptor instead.
func (DataFlow) EnumDescriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{1}
}

type ExternalReferenceType int32

const (
	// Use this if no other types accurately describe the purpose of the external reference
	ExternalReferenceType_EXTERNAL_REFERENCE_TYPE_OTHER ExternalReferenceType = 0
	// Version Control System
	ExternalReferenceType_EXTERNAL_REFERENCE_TYPE_VCS ExternalReferenceType = 1
	// Issue or defect tracking system, or an Application Lifecycle Management (ALM) system
	ExternalReferenceType_EXTERNAL_REFERENCE_TYPE_ISSUE_TRACKER ExternalReferenceType = 2
	// Website
	ExternalReferenceType_EXTERNAL_REFERENCE_TYPE_WEBSITE ExternalReferenceType = 3
	// Security advisories
	ExternalReferenceType_EXTERNAL_REFERENCE_TYPE_ADVISORIES ExternalReferenceType = 4
	// Bill-of-material document (CycloneDX, SPDX, SWID, etc)
	ExternalReferenceType_EXTERNAL_REFERENCE_TYPE_BOM ExternalReferenceType = 5
	// Mailing list or discussion group
	ExternalReferenceType_EXTERNAL_REFERENCE_TYPE_MAILING_LIST ExternalReferenceType = 6
	// Social media account
	ExternalReferenceType_EXTERNAL_REFERENCE_TYPE_SOCIAL ExternalReferenceType = 7
	// Real-time chat platform
	ExternalReferenceType_EXTERNAL_REFERENCE_TYPE_CHAT ExternalReferenceType = 8
	// Documentation, guides, or how-to instructions
	ExternalReferenceType_EXTERNAL_REFERENCE_TYPE_DOCUMENTATION ExternalReferenceType = 9
	// Community or commercial support
	ExternalReferenceType_EXTERNAL_REFERENCE_TYPE_SUPPORT ExternalReferenceType = 10
	// Direct or repository download location
	ExternalReferenceType_EXTERNAL_REFERENCE_TYPE_DISTRIBUTION ExternalReferenceType = 11
	// The URL to the license file. If a license URL has been defined in the license node, it should also be defined as an external reference for completeness
	ExternalReferenceType_EXTERNAL_REFERENCE_TYPE_LICENSE ExternalReferenceType = 12
	// Build-system specific meta file (i.e. pom.xml, package.json, .nuspec, etc)
	ExternalReferenceType_EXTERNAL_REFERENCE_TYPE_BUILD_META ExternalReferenceType = 13
	// URL to an automated build system
	ExternalReferenceType_EXTERNAL_REFERENCE_TYPE_BUILD_SYSTEM ExternalReferenceType = 14
)

// Enum value maps for ExternalReferenceType.
var (
	ExternalReferenceType_name = map[int32]string{
		0:  "EXTERNAL_REFERENCE_TYPE_OTHER",
		1:  "EXTERNAL_REFERENCE_TYPE_VCS",
		2:  "EXTERNAL_REFERENCE_TYPE_ISSUE_TRACKER",
		3:  "EXTERNAL_REFERENCE_TYPE_WEBSITE",
		4:  "EXTERNAL_REFERENCE_TYPE_ADVISORIES",
		5:  "EXTERNAL_REFERENCE_TYPE_BOM",
		6:  "EXTERNAL_REFERENCE_TYPE_MAILING_LIST",
		7:  "EXTERNAL_REFERENCE_TYPE_SOCIAL",
		8:  "EXTERNAL_REFERENCE_TYPE_CHAT",
		9:  "EXTERNAL_REFERENCE_TYPE_DOCUMENTATION",
		10: "EXTERNAL_REFERENCE_TYPE_SUPPORT",
		11: "EXTERNAL_REFERENCE_TYPE_DISTRIBUTION",
		12: "EXTERNAL_REFERENCE_TYPE_LICENSE",
		13: "EXTERNAL_REFERENCE_TYPE_BUILD_META",
		14: "EXTERNAL_REFERENCE_TYPE_BUILD_SYSTEM",
	}
	ExternalReferenceType_value = map[string]int32{
		"EXTERNAL_REFERENCE_TYPE_OTHER":         0,
		"EXTERNAL_REFERENCE_TYPE_VCS":           1,
		"EXTERNAL_REFERENCE_TYPE_ISSUE_TRACKER": 2,
		"EXTERNAL_REFERENCE_TYPE_WEBSITE":       3,
		"EXTERNAL_REFERENCE_TYPE_ADVISORIES":    4,
		"EXTERNAL_REFERENCE_TYPE_BOM":           5,
		"EXTERNAL_REFERENCE_TYPE_MAILING_LIST":  6,
		"EXTERNAL_REFERENCE_TYPE_SOCIAL":        7,
		"EXTERNAL_REFERENCE_TYPE_CHAT":          8,
		"EXTERNAL_REFERENCE_TYPE_DOCUMENTATION": 9,
		"EXTERNAL_REFERENCE_TYPE_SUPPORT":       10,
		"EXTERNAL_REFERENCE_TYPE_DISTRIBUTION":  11,
		"EXTERNAL_REFERENCE_TYPE_LICENSE":       12,
		"EXTERNAL_REFERENCE_TYPE_BUILD_META":    13,
		"EXTERNAL_REFERENCE_TYPE_BUILD_SYSTEM":  14,
	}
)

func (x ExternalReferenceType) Enum() *ExternalReferenceType {
	p := new(ExternalReferenceType)
	*p = x
	return p
}

func (x ExternalReferenceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExternalReferenceType) Descriptor() protoreflect.EnumDescriptor {
	return file_api_cdx_bom_1_3_proto_enumTypes[2].Descriptor()
}

func (ExternalReferenceType) Type() protoreflect.EnumType {
	return &file_api_cdx_bom_1_3_proto_enumTypes[2]
}

func (x ExternalReferenceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExternalReferenceType.Descriptor instead.
func (ExternalReferenceType) EnumDescriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{2}
}

type HashAlg int32

const (
	HashAlg_HASH_ALG_NULL          HashAlg = 0
	HashAlg_HASH_ALG_MD_5          HashAlg = 1
	HashAlg_HASH_ALG_SHA_1         HashAlg = 2
	HashAlg_HASH_ALG_SHA_256       HashAlg = 3
	HashAlg_HASH_ALG_SHA_384       HashAlg = 4
	HashAlg_HASH_ALG_SHA_512       HashAlg = 5
	HashAlg_HASH_ALG_SHA_3_256     HashAlg = 6
	HashAlg_HASH_ALG_SHA_3_384     HashAlg = 7
	HashAlg_HASH_ALG_SHA_3_512     HashAlg = 8
	HashAlg_HASH_ALG_BLAKE_2_B_256 HashAlg = 9
	HashAlg_HASH_ALG_BLAKE_2_B_384 HashAlg = 10
	HashAlg_HASH_ALG_BLAKE_2_B_512 HashAlg = 11
	HashAlg_HASH_ALG_BLAKE_3       HashAlg = 12
)

// Enum value maps for HashAlg.
var (
	HashAlg_name = map[int32]string{
		0:  "HASH_ALG_NULL",
		1:  "HASH_ALG_MD_5",
		2:  "HASH_ALG_SHA_1",
		3:  "HASH_ALG_SHA_256",
		4:  "HASH_ALG_SHA_384",
		5:  "HASH_ALG_SHA_512",
		6:  "HASH_ALG_SHA_3_256",
		7:  "HASH_ALG_SHA_3_384",
		8:  "HASH_ALG_SHA_3_512",
		9:  "HASH_ALG_BLAKE_2_B_256",
		10: "HASH_ALG_BLAKE_2_B_384",
		11: "HASH_ALG_BLAKE_2_B_512",
		12: "HASH_ALG_BLAKE_3",
	}
	HashAlg_value = map[string]int32{
		"HASH_ALG_NULL":          0,
		"HASH_ALG_MD_5":          1,
		"HASH_ALG_SHA_1":         2,
		"HASH_ALG_SHA_256":       3,
		"HASH_ALG_SHA_384":       4,
		"HASH_ALG_SHA_512":       5,
		"HASH_ALG_SHA_3_256":     6,
		"HASH_ALG_SHA_3_384":     7,
		"HASH_ALG_SHA_3_512":     8,
		"HASH_ALG_BLAKE_2_B_256": 9,
		"HASH_ALG_BLAKE_2_B_384": 10,
		"HASH_ALG_BLAKE_2_B_512": 11,
		"HASH_ALG_BLAKE_3":       12,
	}
)

func (x HashAlg) Enum() *HashAlg {
	p := new(HashAlg)
	*p = x
	return p
}

func (x HashAlg) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashAlg) Descriptor() protoreflect.EnumDescriptor {
	return file_api_cdx_bom_1_3_proto_enumTypes[3].Descriptor()
}

func (HashAlg) Type() protoreflect.EnumType {
	return &file_api_cdx_bom_1_3_proto_enumTypes[3]
}

func (x HashAlg) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashAlg.Descriptor instead.
func (HashAlg) EnumDescriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{3}
}

type IssueClassification int32

const (
	IssueClassification_ISSUE_CLASSIFICATION_NULL IssueClassification = 0
	// A fault, flaw, or bug in software
	IssueClassification_ISSUE_CLASSIFICATION_DEFECT IssueClassification = 1
	// A new feature or behavior in software
	IssueClassification_ISSUE_CLASSIFICATION_ENHANCEMENT IssueClassification = 2
	// A special type of defect which impacts security
	IssueClassification_ISSUE_CLASSIFICATION_SECURITY IssueClassification = 3
)

// Enum value maps for IssueClassification.
var (
	IssueClassification_name = map[int32]string{
		0: "ISSUE_CLASSIFICATION_NULL",
		1: "ISSUE_CLASSIFICATION_DEFECT",
		2: "ISSUE_CLASSIFICATION_ENHANCEMENT",
		3: "ISSUE_CLASSIFICATION_SECURITY",
	}
	IssueClassification_value = map[string]int32{
		"ISSUE_CLASSIFICATION_NULL":        0,
		"ISSUE_CLASSIFICATION_DEFECT":      1,
		"ISSUE_CLASSIFICATION_ENHANCEMENT": 2,
		"ISSUE_CLASSIFICATION_SECURITY":    3,
	}
)

func (x IssueClassification) Enum() *IssueClassification {
	p := new(IssueClassification)
	*p = x
	return p
}

func (x IssueClassification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IssueClassification) Descriptor() protoreflect.EnumDescriptor {
	return file_api_cdx_bom_1_3_proto_enumTypes[4].Descriptor()
}

func (IssueClassification) Type() protoreflect.EnumType {
	return &file_api_cdx_bom_1_3_proto_enumTypes[4]
}

func (x IssueClassification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IssueClassification.Descriptor instead.
func (IssueClassification) EnumDescriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{4}
}

type PatchClassification int32

const (
	PatchClassification_PATCH_CLASSIFICATION_NULL PatchClassification = 0
	// A patch which is not developed by the creators or maintainers of the software being patched. Refer to https://en.wikipedia.org/wiki/Unofficial_patch
	PatchClassification_PATCH_CLASSIFICATION_UNOFFICIAL PatchClassification = 1
	// A patch which dynamically modifies runtime behavior. Refer to https://en.wikipedia.org/wiki/Monkey_patch
	PatchClassification_PATCH_CLASSIFICATION_MONKEY PatchClassification = 2
	// A patch which takes code from a newer version of software and applies it to older versions of the same software. Refer to https://en.wikipedia.org/wiki/Backporting
	PatchClassification_PATCH_CLASSIFICATION_BACKPORT PatchClassification = 3
	// A patch created by selectively applying commits from other versions or branches of the same software.
	PatchClassification_PATCH_CLASSIFICATION_CHERRY_PICK PatchClassification = 4
)

// Enum value maps for PatchClassification.
var (
	PatchClassification_name = map[int32]string{
		0: "PATCH_CLASSIFICATION_NULL",
		1: "PATCH_CLASSIFICATION_UNOFFICIAL",
		2: "PATCH_CLASSIFICATION_MONKEY",
		3: "PATCH_CLASSIFICATION_BACKPORT",
		4: "PATCH_CLASSIFICATION_CHERRY_PICK",
	}
	PatchClassification_value = map[string]int32{
		"PATCH_CLASSIFICATION_NULL":        0,
		"PATCH_CLASSIFICATION_UNOFFICIAL":  1,
		"PATCH_CLASSIFICATION_MONKEY":      2,
		"PATCH_CLASSIFICATION_BACKPORT":    3,
		"PATCH_CLASSIFICATION_CHERRY_PICK": 4,
	}
)

func (x PatchClassification) Enum() *PatchClassification {
	p := new(PatchClassification)
	*p = x
	return p
}

func (x PatchClassification) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PatchClassification) Descriptor() protoreflect.EnumDescriptor {
	return file_api_cdx_bom_1_3_proto_enumTypes[5].Descriptor()
}

func (PatchClassification) Type() protoreflect.EnumType {
	return &file_api_cdx_bom_1_3_proto_enumTypes[5]
}

func (x PatchClassification) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PatchClassification.Descriptor instead.
func (PatchClassification) EnumDescriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{5}
}

type Scope int32

const (
	// Default
	Scope_SCOPE_UNSPECIFIED Scope = 0
	// The component is required for runtime
	Scope_SCOPE_REQUIRED Scope = 1
	// The component is optional at runtime. Optional components are components that are not capable of being called due to them not be installed or otherwise accessible by any means. Components that are installed but due to configuration or other restrictions are prohibited from being called must be scoped as 'required'.
	Scope_SCOPE_OPTIONAL Scope = 2
	// Components that are excluded provide the ability to document component usage for test and other non-runtime purposes. Excluded components are not reachable within a call graph at runtime.
	Scope_SCOPE_EXCLUDED Scope = 3
)

// Enum value maps for Scope.
var (
	Scope_name = map[int32]string{
		0: "SCOPE_UNSPECIFIED",
		1: "SCOPE_REQUIRED",
		2: "SCOPE_OPTIONAL",
		3: "SCOPE_EXCLUDED",
	}
	Scope_value = map[string]int32{
		"SCOPE_UNSPECIFIED": 0,
		"SCOPE_REQUIRED":    1,
		"SCOPE_OPTIONAL":    2,
		"SCOPE_EXCLUDED":    3,
	}
)

func (x Scope) Enum() *Scope {
	p := new(Scope)
	*p = x
	return p
}

func (x Scope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Scope) Descriptor() protoreflect.EnumDescriptor {
	return file_api_cdx_bom_1_3_proto_enumTypes[6].Descriptor()
}

func (Scope) Type() protoreflect.EnumType {
	return &file_api_cdx_bom_1_3_proto_enumTypes[6]
}

func (x Scope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Scope.Descriptor instead.
func (Scope) EnumDescriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{6}
}

type Aggregate int32

const (
	// Default, no statement about the aggregate completeness is being made
	Aggregate_AGGREGATE_NOT_SPECIFIED Aggregate = 0
	// The aggregate composition is complete
	Aggregate_AGGREGATE_COMPLETE Aggregate = 1
	// The aggregate composition is incomplete
	Aggregate_AGGREGATE_INCOMPLETE Aggregate = 2
	// The aggregate composition is incomplete for first party components, complete for third party components
	Aggregate_AGGREGATE_INCOMPLETE_FIRST_PARTY_ONLY Aggregate = 3
	// The aggregate composition is incomplete for third party components, complete for first party components
	Aggregate_AGGREGATE_INCOMPLETE_THIRD_PARTY_ONLY Aggregate = 4
	// The aggregate composition completeness is unknown
	Aggregate_AGGREGATE_UNKNOWN Aggregate = 5
)

// Enum value maps for Aggregate.
var (
	Aggregate_name = map[int32]string{
		0: "AGGREGATE_NOT_SPECIFIED",
		1: "AGGREGATE_COMPLETE",
		2: "AGGREGATE_INCOMPLETE",
		3: "AGGREGATE_INCOMPLETE_FIRST_PARTY_ONLY",
		4: "AGGREGATE_INCOMPLETE_THIRD_PARTY_ONLY",
		5: "AGGREGATE_UNKNOWN",
	}
	Aggregate_value = map[string]int32{
		"AGGREGATE_NOT_SPECIFIED":               0,
		"AGGREGATE_COMPLETE":                    1,
		"AGGREGATE_INCOMPLETE":                  2,
		"AGGREGATE_INCOMPLETE_FIRST_PARTY_ONLY": 3,
		"AGGREGATE_INCOMPLETE_THIRD_PARTY_ONLY": 4,
		"AGGREGATE_UNKNOWN":                     5,
	}
)

func (x Aggregate) Enum() *Aggregate {
	p := new(Aggregate)
	*p = x
	return p
}

func (x Aggregate) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Aggregate) Descriptor() protoreflect.EnumDescriptor {
	return file_api_cdx_bom_1_3_proto_enumTypes[7].Descriptor()
}

func (Aggregate) Type() protoreflect.EnumType {
	return &file_api_cdx_bom_1_3_proto_enumTypes[7]
}

func (x Aggregate) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Aggregate.Descriptor instead.
func (Aggregate) EnumDescriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{7}
}

// Specifies attributes of the text
type AttachedText struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the content type of the text. Defaults to text/plain if not specified.
	ContentType *string `protobuf:"bytes,1,opt,name=content_type,json=contentType,proto3,oneof" json:"content_type,omitempty"`
	// Specifies the optional encoding the text is represented in
	Encoding *string `protobuf:"bytes,2,opt,name=encoding,proto3,oneof" json:"encoding,omitempty"`
	// SimpleContent value of element
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *AttachedText) Reset() {
	*x = AttachedText{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AttachedText) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AttachedText) ProtoMessage() {}

func (x *AttachedText) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AttachedText.ProtoReflect.Descriptor instead.
func (*AttachedText) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{0}
}

func (x *AttachedText) GetContentType() string {
	if x != nil && x.ContentType != nil {
		return *x.ContentType
	}
	return ""
}

func (x *AttachedText) GetEncoding() string {
	if x != nil && x.Encoding != nil {
		return *x.Encoding
	}
	return ""
}

func (x *AttachedText) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Bom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the CycloneDX specification a BOM is written to (starting at version 1.3)
	SpecVersion string `protobuf:"bytes,1,opt,name=spec_version,json=specVersion,proto3" json:"spec_version,omitempty"`
	// The version allows component publishers/authors to make changes to existing BOMs to update various aspects of the document such as description or licenses. When a system is presented with multiple BOMs for the same component, the system should use the most recent version of the BOM. The default version is '1' and should be incremented for each version of the BOM that is published. Each version of a component should have a unique BOM and if no changes are made to the BOMs, then each BOM will have a version of '1'.
	Version *int32 `protobuf:"varint,2,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// Every BOM generated should have a unique serial number, even if the contents of the BOM being generated have not changed over time. The process or tool responsible for creating the BOM should create random UUID's for every BOM generated.
	SerialNumber *string `protobuf:"bytes,3,opt,name=serial_number,json=serialNumber,proto3,oneof" json:"serial_number,omitempty"`
	// Provides additional information about a BOM.
	Metadata *Metadata `protobuf:"bytes,4,opt,name=metadata,proto3,oneof" json:"metadata,omitempty"`
	// Provides the ability to document a list of components.
	Components []*Component `protobuf:"bytes,5,rep,name=components,proto3" json:"components,omitempty"`
	// Provides the ability to document a list of external services.
	Services []*Service `protobuf:"bytes,6,rep,name=services,proto3" json:"services,omitempty"`
	// Provides the ability to document external references related to the BOM or to the project the BOM describes.
	ExternalReferences []*ExternalReference `protobuf:"bytes,7,rep,name=external_references,json=externalReferences,proto3" json:"external_references,omitempty"`
	// Provides the ability to document dependency relationships.
	Dependencies []*Dependency `protobuf:"bytes,8,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
	// Provides the ability to document aggregate completeness
	Compositions []*Composition `protobuf:"bytes,9,rep,name=compositions,proto3" json:"compositions,omitempty"`
}

func (x *Bom) Reset() {
	*x = Bom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bom) ProtoMessage() {}

func (x *Bom) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bom.ProtoReflect.Descriptor instead.
func (*Bom) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{1}
}

func (x *Bom) GetSpecVersion() string {
	if x != nil {
		return x.SpecVersion
	}
	return ""
}

func (x *Bom) GetVersion() int32 {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return 0
}

func (x *Bom) GetSerialNumber() string {
	if x != nil && x.SerialNumber != nil {
		return *x.SerialNumber
	}
	return ""
}

func (x *Bom) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Bom) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *Bom) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *Bom) GetExternalReferences() []*ExternalReference {
	if x != nil {
		return x.ExternalReferences
	}
	return nil
}

func (x *Bom) GetDependencies() []*Dependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

func (x *Bom) GetCompositions() []*Composition {
	if x != nil {
		return x.Compositions
	}
	return nil
}

type Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A unique identifier of the commit. This may be version control specific. For example, Subversion uses revision numbers whereas git uses commit hashes.
	Uid *string `protobuf:"bytes,1,opt,name=uid,proto3,oneof" json:"uid,omitempty"`
	// The URL to the commit. This URL will typically point to a commit in a version control system.
	Url *string `protobuf:"bytes,2,opt,name=url,proto3,oneof" json:"url,omitempty"`
	// The author who created the changes in the commit
	Author *IdentifiableAction `protobuf:"bytes,3,opt,name=author,proto3,oneof" json:"author,omitempty"`
	// The person who committed or pushed the commit
	Committer *IdentifiableAction `protobuf:"bytes,4,opt,name=committer,proto3,oneof" json:"committer,omitempty"`
	// The text description of the contents of the commit
	Message *string `protobuf:"bytes,5,opt,name=message,proto3,oneof" json:"message,omitempty"`
}

func (x *Commit) Reset() {
	*x = Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Commit) ProtoMessage() {}

func (x *Commit) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Commit.ProtoReflect.Descriptor instead.
func (*Commit) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{2}
}

func (x *Commit) GetUid() string {
	if x != nil && x.Uid != nil {
		return *x.Uid
	}
	return ""
}

func (x *Commit) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

func (x *Commit) GetAuthor() *IdentifiableAction {
	if x != nil {
		return x.Author
	}
	return nil
}

func (x *Commit) GetCommitter() *IdentifiableAction {
	if x != nil {
		return x.Committer
	}
	return nil
}

func (x *Commit) GetMessage() string {
	if x != nil && x.Message != nil {
		return *x.Message
	}
	return ""
}

type Component struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the type of component. For software components, classify as application if no more specific appropriate classification is available or cannot be determined for the component.
	Type Classification `protobuf:"varint,1,opt,name=type,proto3,enum=cyclonedx.v1_3.Classification" json:"type,omitempty"`
	// The optional mime-type of the component. When used on file components, the mime-type can provide additional context about the kind of file being represented such as an image, font, or executable. Some library or framework components may also have an associated mime-type.
	MimeType *string `protobuf:"bytes,2,opt,name=mime_type,json=mimeType,proto3,oneof" json:"mime_type,omitempty"`
	// An optional identifier which can be used to reference the component elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
	BomRef *string `protobuf:"bytes,3,opt,name=bom_ref,json=bomRef,proto3,oneof" json:"bom_ref,omitempty"`
	// The organization that supplied the component. The supplier may often be the manufacture, but may also be a distributor or repackager.
	Supplier *OrganizationalEntity `protobuf:"bytes,4,opt,name=supplier,proto3,oneof" json:"supplier,omitempty"`
	// The person(s) or organization(s) that authored the component
	Author *string `protobuf:"bytes,5,opt,name=author,proto3,oneof" json:"author,omitempty"`
	// The person(s) or organization(s) that published the component
	Publisher *string `protobuf:"bytes,6,opt,name=publisher,proto3,oneof" json:"publisher,omitempty"`
	// The grouping name or identifier. This will often be a shortened, single name of the company or project that produced the component, or the source package or domain name. Whitespace and special characters should be avoided. Examples include: apache, org.apache.commons, and apache.org.
	Group *string `protobuf:"bytes,7,opt,name=group,proto3,oneof" json:"group,omitempty"`
	// The name of the component. This will often be a shortened, single name of the component. Examples: commons-lang3 and jquery
	Name string `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	// The component version. The version should ideally comply with semantic versioning but is not enforced.
	Version string `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`
	// Specifies a description for the component
	Description *string `protobuf:"bytes,10,opt,name=description,proto3,oneof" json:"description,omitempty"`
	// Specifies the scope of the component. If scope is not specified, 'runtime' scope should be assumed by the consumer of the BOM
	Scope    *Scope           `protobuf:"varint,11,opt,name=scope,proto3,enum=cyclonedx.v1_3.Scope,oneof" json:"scope,omitempty"`
	Hashes   []*Hash          `protobuf:"bytes,12,rep,name=hashes,proto3" json:"hashes,omitempty"`
	Licenses []*LicenseChoice `protobuf:"bytes,13,rep,name=licenses,proto3" json:"licenses,omitempty"`
	// An optional copyright notice informing users of the underlying claims to copyright ownership in a published work.
	Copyright *string `protobuf:"bytes,14,opt,name=copyright,proto3,oneof" json:"copyright,omitempty"`
	// DEPRECATED - DO NOT USE. This will be removed in a future version. Specifies a well-formed CPE name. See https://nvd.nist.gov/products/cpe
	Cpe *string `protobuf:"bytes,15,opt,name=cpe,proto3,oneof" json:"cpe,omitempty"`
	// Specifies the package-url (PURL). The purl, if specified, must be valid and conform to the specification defined at: https://github.com/package-url/purl-spec
	Purl *string `protobuf:"bytes,16,opt,name=purl,proto3,oneof" json:"purl,omitempty"`
	// Specifies metadata and content for ISO-IEC 19770-2 Software Identification (SWID) Tags.
	Swid *Swid `protobuf:"bytes,17,opt,name=swid,proto3,oneof" json:"swid,omitempty"`
	// DEPRECATED - DO NOT USE. This will be removed in a future version. Use the pedigree element instead to supply information on exactly how the component was modified. A boolean value indicating is the component has been modified from the original. A value of true indicates the component is a derivative of the original. A value of false indicates the component has not been modified from the original.
	Modified *bool `protobuf:"varint,18,opt,name=modified,proto3,oneof" json:"modified,omitempty"`
	// Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc.
	Pedigree *Pedigree `protobuf:"bytes,19,opt,name=pedigree,proto3,oneof" json:"pedigree,omitempty"`
	// Provides the ability to document external references related to the component or to the project the component describes.
	ExternalReferences []*ExternalReference `protobuf:"bytes,20,rep,name=external_references,json=externalReferences,proto3" json:"external_references,omitempty"`
	// Specifies optional sub-components. This is not a dependency tree. It provides a way to specify a hierarchical representation of component assemblies, similar to system -> subsystem -> parts assembly in physical supply chains.
	Components []*Component `protobuf:"bytes,21,rep,name=components,proto3" json:"components,omitempty"`
	// Specifies optional, custom, properties
	Properties []*Property `protobuf:"bytes,22,rep,name=properties,proto3" json:"properties,omitempty"`
	// Specifies optional license and copyright evidence
	Evidence []*Evidence `protobuf:"bytes,23,rep,name=evidence,proto3" json:"evidence,omitempty"`
}

func (x *Component) Reset() {
	*x = Component{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Component) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Component) ProtoMessage() {}

func (x *Component) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Component.ProtoReflect.Descriptor instead.
func (*Component) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{3}
}

func (x *Component) GetType() Classification {
	if x != nil {
		return x.Type
	}
	return Classification_CLASSIFICATION_NULL
}

func (x *Component) GetMimeType() string {
	if x != nil && x.MimeType != nil {
		return *x.MimeType
	}
	return ""
}

func (x *Component) GetBomRef() string {
	if x != nil && x.BomRef != nil {
		return *x.BomRef
	}
	return ""
}

func (x *Component) GetSupplier() *OrganizationalEntity {
	if x != nil {
		return x.Supplier
	}
	return nil
}

func (x *Component) GetAuthor() string {
	if x != nil && x.Author != nil {
		return *x.Author
	}
	return ""
}

func (x *Component) GetPublisher() string {
	if x != nil && x.Publisher != nil {
		return *x.Publisher
	}
	return ""
}

func (x *Component) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

func (x *Component) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Component) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Component) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Component) GetScope() Scope {
	if x != nil && x.Scope != nil {
		return *x.Scope
	}
	return Scope_SCOPE_UNSPECIFIED
}

func (x *Component) GetHashes() []*Hash {
	if x != nil {
		return x.Hashes
	}
	return nil
}

func (x *Component) GetLicenses() []*LicenseChoice {
	if x != nil {
		return x.Licenses
	}
	return nil
}

func (x *Component) GetCopyright() string {
	if x != nil && x.Copyright != nil {
		return *x.Copyright
	}
	return ""
}

func (x *Component) GetCpe() string {
	if x != nil && x.Cpe != nil {
		return *x.Cpe
	}
	return ""
}

func (x *Component) GetPurl() string {
	if x != nil && x.Purl != nil {
		return *x.Purl
	}
	return ""
}

func (x *Component) GetSwid() *Swid {
	if x != nil {
		return x.Swid
	}
	return nil
}

func (x *Component) GetModified() bool {
	if x != nil && x.Modified != nil {
		return *x.Modified
	}
	return false
}

func (x *Component) GetPedigree() *Pedigree {
	if x != nil {
		return x.Pedigree
	}
	return nil
}

func (x *Component) GetExternalReferences() []*ExternalReference {
	if x != nil {
		return x.ExternalReferences
	}
	return nil
}

func (x *Component) GetComponents() []*Component {
	if x != nil {
		return x.Components
	}
	return nil
}

func (x *Component) GetProperties() []*Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *Component) GetEvidence() []*Evidence {
	if x != nil {
		return x.Evidence
	}
	return nil
}

// Specifies the data classification.
type DataClassification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the flow direction of the data.
	Flow DataFlow `protobuf:"varint,1,opt,name=flow,proto3,enum=cyclonedx.v1_3.DataFlow" json:"flow,omitempty"`
	// SimpleContent value of element
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DataClassification) Reset() {
	*x = DataClassification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataClassification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataClassification) ProtoMessage() {}

func (x *DataClassification) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataClassification.ProtoReflect.Descriptor instead.
func (*DataClassification) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{4}
}

func (x *DataClassification) GetFlow() DataFlow {
	if x != nil {
		return x.Flow
	}
	return DataFlow_DATA_FLOW_NULL
}

func (x *DataClassification) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type Dependency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// References a component or service by the its bom-ref attribute
	Ref          string        `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	Dependencies []*Dependency `protobuf:"bytes,2,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *Dependency) Reset() {
	*x = Dependency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Dependency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Dependency) ProtoMessage() {}

func (x *Dependency) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Dependency.ProtoReflect.Descriptor instead.
func (*Dependency) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{5}
}

func (x *Dependency) GetRef() string {
	if x != nil {
		return x.Ref
	}
	return ""
}

func (x *Dependency) GetDependencies() []*Dependency {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type Diff struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the optional text of the diff
	Text *AttachedText `protobuf:"bytes,1,opt,name=text,proto3,oneof" json:"text,omitempty"`
	// Specifies the URL to the diff
	Url *string `protobuf:"bytes,2,opt,name=url,proto3,oneof" json:"url,omitempty"`
}

func (x *Diff) Reset() {
	*x = Diff{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Diff) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Diff) ProtoMessage() {}

func (x *Diff) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Diff.ProtoReflect.Descriptor instead.
func (*Diff) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{6}
}

func (x *Diff) GetText() *AttachedText {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Diff) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type ExternalReference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the type of external reference. There are built-in types to describe common references. If a type does not exist for the reference being referred to, use the "other" type.
	Type ExternalReferenceType `protobuf:"varint,1,opt,name=type,proto3,enum=cyclonedx.v1_3.ExternalReferenceType" json:"type,omitempty"`
	// The URL to the external reference
	Url string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	// An optional comment describing the external reference
	Comment *string `protobuf:"bytes,3,opt,name=comment,proto3,oneof" json:"comment,omitempty"`
	// Optional integrity hashes for the external resource content
	Hashes []*Hash `protobuf:"bytes,4,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (x *ExternalReference) Reset() {
	*x = ExternalReference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalReference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalReference) ProtoMessage() {}

func (x *ExternalReference) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalReference.ProtoReflect.Descriptor instead.
func (*ExternalReference) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{7}
}

func (x *ExternalReference) GetType() ExternalReferenceType {
	if x != nil {
		return x.Type
	}
	return ExternalReferenceType_EXTERNAL_REFERENCE_TYPE_OTHER
}

func (x *ExternalReference) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *ExternalReference) GetComment() string {
	if x != nil && x.Comment != nil {
		return *x.Comment
	}
	return ""
}

func (x *ExternalReference) GetHashes() []*Hash {
	if x != nil {
		return x.Hashes
	}
	return nil
}

// Specifies the file hash of the component
type Hash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the algorithm used to create the hash
	Alg HashAlg `protobuf:"varint,1,opt,name=alg,proto3,enum=cyclonedx.v1_3.HashAlg" json:"alg,omitempty"`
	// SimpleContent value of element
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Hash) Reset() {
	*x = Hash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hash) ProtoMessage() {}

func (x *Hash) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hash.ProtoReflect.Descriptor instead.
func (*Hash) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{8}
}

func (x *Hash) GetAlg() HashAlg {
	if x != nil {
		return x.Alg
	}
	return HashAlg_HASH_ALG_NULL
}

func (x *Hash) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type IdentifiableAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The timestamp in which the action occurred
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// The name of the individual who performed the action
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// The email address of the individual who performed the action
	Email *string `protobuf:"bytes,3,opt,name=email,proto3,oneof" json:"email,omitempty"`
}

func (x *IdentifiableAction) Reset() {
	*x = IdentifiableAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentifiableAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentifiableAction) ProtoMessage() {}

func (x *IdentifiableAction) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentifiableAction.ProtoReflect.Descriptor instead.
func (*IdentifiableAction) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{9}
}

func (x *IdentifiableAction) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *IdentifiableAction) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *IdentifiableAction) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

type Issue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the type of issue
	Type IssueClassification `protobuf:"varint,1,opt,name=type,proto3,enum=cyclonedx.v1_3.IssueClassification" json:"type,omitempty"`
	// The identifier of the issue assigned by the source of the issue
	Id *string `protobuf:"bytes,2,opt,name=id,proto3,oneof" json:"id,omitempty"`
	// The name of the issue
	Name *string `protobuf:"bytes,3,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// A description of the issue
	Description *string  `protobuf:"bytes,4,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Source      *Source  `protobuf:"bytes,5,opt,name=source,proto3,oneof" json:"source,omitempty"`
	References  []string `protobuf:"bytes,6,rep,name=references,proto3" json:"references,omitempty"`
}

func (x *Issue) Reset() {
	*x = Issue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Issue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Issue) ProtoMessage() {}

func (x *Issue) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Issue.ProtoReflect.Descriptor instead.
func (*Issue) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{10}
}

func (x *Issue) GetType() IssueClassification {
	if x != nil {
		return x.Type
	}
	return IssueClassification_ISSUE_CLASSIFICATION_NULL
}

func (x *Issue) GetId() string {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return ""
}

func (x *Issue) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Issue) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Issue) GetSource() *Source {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *Issue) GetReferences() []string {
	if x != nil {
		return x.References
	}
	return nil
}

// The source of the issue where it is documented.
type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the source. For example "National Vulnerability Database", "NVD", and "Apache"
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// The url of the issue documentation as provided by the source
	Url *string `protobuf:"bytes,2,opt,name=url,proto3,oneof" json:"url,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{11}
}

func (x *Source) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Source) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type LicenseChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Choice:
	//	*LicenseChoice_License
	//	*LicenseChoice_Expression
	Choice isLicenseChoice_Choice `protobuf_oneof:"choice"`
}

func (x *LicenseChoice) Reset() {
	*x = LicenseChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseChoice) ProtoMessage() {}

func (x *LicenseChoice) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseChoice.ProtoReflect.Descriptor instead.
func (*LicenseChoice) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{12}
}

func (m *LicenseChoice) GetChoice() isLicenseChoice_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *LicenseChoice) GetLicense() *License {
	if x, ok := x.GetChoice().(*LicenseChoice_License); ok {
		return x.License
	}
	return nil
}

func (x *LicenseChoice) GetExpression() string {
	if x, ok := x.GetChoice().(*LicenseChoice_Expression); ok {
		return x.Expression
	}
	return ""
}

type isLicenseChoice_Choice interface {
	isLicenseChoice_Choice()
}

type LicenseChoice_License struct {
	License *License `protobuf:"bytes,1,opt,name=license,proto3,oneof"`
}

type LicenseChoice_Expression struct {
	Expression string `protobuf:"bytes,2,opt,name=expression,proto3,oneof"`
}

func (*LicenseChoice_License) isLicenseChoice_Choice() {}

func (*LicenseChoice_Expression) isLicenseChoice_Choice() {}

type License struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to License:
	//	*License_Id
	//	*License_Name
	License isLicense_License `protobuf_oneof:"license"`
	// Specifies the optional full text of the attachment
	Text *AttachedText `protobuf:"bytes,3,opt,name=text,proto3,oneof" json:"text,omitempty"`
	// The URL to the attachment file. If the attachment is a license or BOM, an externalReference should also be specified for completeness.
	Url *string `protobuf:"bytes,4,opt,name=url,proto3,oneof" json:"url,omitempty"`
}

func (x *License) Reset() {
	*x = License{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *License) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*License) ProtoMessage() {}

func (x *License) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use License.ProtoReflect.Descriptor instead.
func (*License) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{13}
}

func (m *License) GetLicense() isLicense_License {
	if m != nil {
		return m.License
	}
	return nil
}

func (x *License) GetId() string {
	if x, ok := x.GetLicense().(*License_Id); ok {
		return x.Id
	}
	return ""
}

func (x *License) GetName() string {
	if x, ok := x.GetLicense().(*License_Name); ok {
		return x.Name
	}
	return ""
}

func (x *License) GetText() *AttachedText {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *License) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

type isLicense_License interface {
	isLicense_License()
}

type License_Id struct {
	// A valid SPDX license ID
	Id string `protobuf:"bytes,1,opt,name=id,proto3,oneof"`
}

type License_Name struct {
	// If SPDX does not define the license used, this field may be used to provide the license name
	Name string `protobuf:"bytes,2,opt,name=name,proto3,oneof"`
}

func (*License_Id) isLicense_License() {}

func (*License_Name) isLicense_License() {}

type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The date and time (timestamp) when the document was created.
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3,oneof" json:"timestamp,omitempty"`
	// The tool(s) used in the creation of the BOM.
	Tools []*Tool `protobuf:"bytes,2,rep,name=tools,proto3" json:"tools,omitempty"`
	// The person(s) who created the BOM. Authors are common in BOMs created through manual processes. BOMs created through automated means may not have authors.
	Authors []*OrganizationalContact `protobuf:"bytes,3,rep,name=authors,proto3" json:"authors,omitempty"`
	// The component that the BOM describes.
	Component *Component `protobuf:"bytes,4,opt,name=component,proto3,oneof" json:"component,omitempty"`
	// The organization that manufactured the component that the BOM describes.
	Manufacture *OrganizationalEntity `protobuf:"bytes,5,opt,name=manufacture,proto3,oneof" json:"manufacture,omitempty"`
	// The organization that supplied the component that the BOM describes. The supplier may often be the manufacture, but may also be a distributor or repackager.
	Supplier *OrganizationalEntity `protobuf:"bytes,6,opt,name=supplier,proto3,oneof" json:"supplier,omitempty"`
	// The license information for the BOM document
	Licenses *LicenseChoice `protobuf:"bytes,7,opt,name=licenses,proto3,oneof" json:"licenses,omitempty"`
	// Specifies optional, custom, properties
	Properties []*Property `protobuf:"bytes,8,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{14}
}

func (x *Metadata) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Metadata) GetTools() []*Tool {
	if x != nil {
		return x.Tools
	}
	return nil
}

func (x *Metadata) GetAuthors() []*OrganizationalContact {
	if x != nil {
		return x.Authors
	}
	return nil
}

func (x *Metadata) GetComponent() *Component {
	if x != nil {
		return x.Component
	}
	return nil
}

func (x *Metadata) GetManufacture() *OrganizationalEntity {
	if x != nil {
		return x.Manufacture
	}
	return nil
}

func (x *Metadata) GetSupplier() *OrganizationalEntity {
	if x != nil {
		return x.Supplier
	}
	return nil
}

func (x *Metadata) GetLicenses() *LicenseChoice {
	if x != nil {
		return x.Licenses
	}
	return nil
}

func (x *Metadata) GetProperties() []*Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

type OrganizationalContact struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the contact
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// The email address of the contact.
	Email *string `protobuf:"bytes,2,opt,name=email,proto3,oneof" json:"email,omitempty"`
	// The phone number of the contact.
	Phone *string `protobuf:"bytes,3,opt,name=phone,proto3,oneof" json:"phone,omitempty"`
}

func (x *OrganizationalContact) Reset() {
	*x = OrganizationalContact{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationalContact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationalContact) ProtoMessage() {}

func (x *OrganizationalContact) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationalContact.ProtoReflect.Descriptor instead.
func (*OrganizationalContact) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{15}
}

func (x *OrganizationalContact) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *OrganizationalContact) GetEmail() string {
	if x != nil && x.Email != nil {
		return *x.Email
	}
	return ""
}

func (x *OrganizationalContact) GetPhone() string {
	if x != nil && x.Phone != nil {
		return *x.Phone
	}
	return ""
}

type OrganizationalEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the organization
	Name *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// The URL of the organization. Multiple URLs are allowed.
	Url []string `protobuf:"bytes,2,rep,name=url,proto3" json:"url,omitempty"`
	// A contact person at the organization. Multiple contacts are allowed.
	Contact []*OrganizationalContact `protobuf:"bytes,3,rep,name=contact,proto3" json:"contact,omitempty"`
}

func (x *OrganizationalEntity) Reset() {
	*x = OrganizationalEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrganizationalEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrganizationalEntity) ProtoMessage() {}

func (x *OrganizationalEntity) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrganizationalEntity.ProtoReflect.Descriptor instead.
func (*OrganizationalEntity) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{16}
}

func (x *OrganizationalEntity) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *OrganizationalEntity) GetUrl() []string {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *OrganizationalEntity) GetContact() []*OrganizationalContact {
	if x != nil {
		return x.Contact
	}
	return nil
}

type Patch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the purpose for the patch including the resolution of defects, security issues, or new behavior or functionality
	Type PatchClassification `protobuf:"varint,1,opt,name=type,proto3,enum=cyclonedx.v1_3.PatchClassification" json:"type,omitempty"`
	// The patch file (or diff) that show changes. Refer to https://en.wikipedia.org/wiki/Diff
	Diff     *Diff    `protobuf:"bytes,2,opt,name=diff,proto3,oneof" json:"diff,omitempty"`
	Resolves []*Issue `protobuf:"bytes,3,rep,name=resolves,proto3" json:"resolves,omitempty"`
}

func (x *Patch) Reset() {
	*x = Patch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Patch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Patch) ProtoMessage() {}

func (x *Patch) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Patch.ProtoReflect.Descriptor instead.
func (*Patch) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{17}
}

func (x *Patch) GetType() PatchClassification {
	if x != nil {
		return x.Type
	}
	return PatchClassification_PATCH_CLASSIFICATION_NULL
}

func (x *Patch) GetDiff() *Diff {
	if x != nil {
		return x.Diff
	}
	return nil
}

func (x *Patch) GetResolves() []*Issue {
	if x != nil {
		return x.Resolves
	}
	return nil
}

// Component pedigree is a way to document complex supply chain scenarios where components are created, distributed, modified, redistributed, combined with other components, etc. Pedigree supports viewing this complex chain from the beginning, the end, or anywhere in the middle. It also provides a way to document variants where the exact relation may not be known.
type Pedigree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes zero or more components in which a component is derived from. This is commonly used to describe forks from existing projects where the forked version contains a ancestor node containing the original component it was forked from. For example, Component A is the original component. Component B is the component being used and documented in the BOM. However, Component B contains a pedigree node with a single ancestor documenting Component A - the original component from which Component B is derived from.
	Ancestors []*Component `protobuf:"bytes,1,rep,name=ancestors,proto3" json:"ancestors,omitempty"`
	// Descendants are the exact opposite of ancestors. This provides a way to document all forks (and their forks) of an original or root component.
	Descendants []*Component `protobuf:"bytes,2,rep,name=descendants,proto3" json:"descendants,omitempty"`
	// Variants describe relations where the relationship between the components are not known. For example, if Component A contains nearly identical code to Component B. They are both related, but it is unclear if one is derived from the other, or if they share a common ancestor.
	Variants []*Component `protobuf:"bytes,3,rep,name=variants,proto3" json:"variants,omitempty"`
	// A list of zero or more commits which provide a trail describing how the component deviates from an ancestor, descendant, or variant.
	Commits []*Commit `protobuf:"bytes,4,rep,name=commits,proto3" json:"commits,omitempty"`
	// A list of zero or more patches describing how the component deviates from an ancestor, descendant, or variant. Patches may be complimentary to commits or may be used in place of commits.
	Patches []*Patch `protobuf:"bytes,5,rep,name=patches,proto3" json:"patches,omitempty"`
	// Notes, observations, and other non-structured commentary describing the components pedigree.
	Notes *string `protobuf:"bytes,6,opt,name=notes,proto3,oneof" json:"notes,omitempty"`
}

func (x *Pedigree) Reset() {
	*x = Pedigree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pedigree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pedigree) ProtoMessage() {}

func (x *Pedigree) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pedigree.ProtoReflect.Descriptor instead.
func (*Pedigree) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{18}
}

func (x *Pedigree) GetAncestors() []*Component {
	if x != nil {
		return x.Ancestors
	}
	return nil
}

func (x *Pedigree) GetDescendants() []*Component {
	if x != nil {
		return x.Descendants
	}
	return nil
}

func (x *Pedigree) GetVariants() []*Component {
	if x != nil {
		return x.Variants
	}
	return nil
}

func (x *Pedigree) GetCommits() []*Commit {
	if x != nil {
		return x.Commits
	}
	return nil
}

func (x *Pedigree) GetPatches() []*Patch {
	if x != nil {
		return x.Patches
	}
	return nil
}

func (x *Pedigree) GetNotes() string {
	if x != nil && x.Notes != nil {
		return *x.Notes
	}
	return ""
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// An optional identifier which can be used to reference the service elsewhere in the BOM. Uniqueness is enforced within all elements and children of the root-level bom element.
	BomRef *string `protobuf:"bytes,1,opt,name=bom_ref,json=bomRef,proto3,oneof" json:"bom_ref,omitempty"`
	// The organization that provides the service.
	Provider *OrganizationalEntity `protobuf:"bytes,2,opt,name=provider,proto3,oneof" json:"provider,omitempty"`
	// The grouping name, namespace, or identifier. This will often be a shortened, single name of the company or project that produced the service or domain name. Whitespace and special characters should be avoided.
	Group *string `protobuf:"bytes,3,opt,name=group,proto3,oneof" json:"group,omitempty"`
	// The name of the service. This will often be a shortened, single name of the service.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// The service version.
	Version *string `protobuf:"bytes,5,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// Specifies a description for the service.
	Description *string  `protobuf:"bytes,6,opt,name=description,proto3,oneof" json:"description,omitempty"`
	Endpoints   []string `protobuf:"bytes,7,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	// A boolean value indicating if the service requires authentication. A value of true indicates the service requires authentication prior to use. A value of false indicates the service does not require authentication.
	Authenticated *bool `protobuf:"varint,8,opt,name=authenticated,proto3,oneof" json:"authenticated,omitempty"`
	// A boolean value indicating if use of the service crosses a trust zone or boundary. A value of true indicates that by using the service, a trust boundary is crossed. A value of false indicates that by using the service, a trust boundary is not crossed.
	XTrustBoundary *bool                 `protobuf:"varint,9,opt,name=x_trust_boundary,json=xTrustBoundary,proto3,oneof" json:"x_trust_boundary,omitempty"`
	Data           []*DataClassification `protobuf:"bytes,10,rep,name=data,proto3" json:"data,omitempty"`
	Licenses       []*LicenseChoice      `protobuf:"bytes,11,rep,name=licenses,proto3" json:"licenses,omitempty"`
	// Provides the ability to document external references related to the service.
	ExternalReferences []*ExternalReference `protobuf:"bytes,12,rep,name=external_references,json=externalReferences,proto3" json:"external_references,omitempty"`
	// Specifies optional sub-service. This is not a dependency tree. It provides a way to specify a hierarchical representation of service assemblies, similar to system -> subsystem -> parts assembly in physical supply chains.
	Services []*Service `protobuf:"bytes,13,rep,name=services,proto3" json:"services,omitempty"`
	// Specifies optional, custom, properties
	Properties []*Property `protobuf:"bytes,14,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{19}
}

func (x *Service) GetBomRef() string {
	if x != nil && x.BomRef != nil {
		return *x.BomRef
	}
	return ""
}

func (x *Service) GetProvider() *OrganizationalEntity {
	if x != nil {
		return x.Provider
	}
	return nil
}

func (x *Service) GetGroup() string {
	if x != nil && x.Group != nil {
		return *x.Group
	}
	return ""
}

func (x *Service) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Service) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *Service) GetDescription() string {
	if x != nil && x.Description != nil {
		return *x.Description
	}
	return ""
}

func (x *Service) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

func (x *Service) GetAuthenticated() bool {
	if x != nil && x.Authenticated != nil {
		return *x.Authenticated
	}
	return false
}

func (x *Service) GetXTrustBoundary() bool {
	if x != nil && x.XTrustBoundary != nil {
		return *x.XTrustBoundary
	}
	return false
}

func (x *Service) GetData() []*DataClassification {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Service) GetLicenses() []*LicenseChoice {
	if x != nil {
		return x.Licenses
	}
	return nil
}

func (x *Service) GetExternalReferences() []*ExternalReference {
	if x != nil {
		return x.ExternalReferences
	}
	return nil
}

func (x *Service) GetServices() []*Service {
	if x != nil {
		return x.Services
	}
	return nil
}

func (x *Service) GetProperties() []*Property {
	if x != nil {
		return x.Properties
	}
	return nil
}

type Swid struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maps to the tagId of a SoftwareIdentity.
	TagId string `protobuf:"bytes,1,opt,name=tag_id,json=tagId,proto3" json:"tag_id,omitempty"`
	// Maps to the name of a SoftwareIdentity.
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Maps to the version of a SoftwareIdentity.
	Version *string `protobuf:"bytes,3,opt,name=version,proto3,oneof" json:"version,omitempty"`
	// Maps to the tagVersion of a SoftwareIdentity.
	TagVersion *int32 `protobuf:"varint,4,opt,name=tag_version,json=tagVersion,proto3,oneof" json:"tag_version,omitempty"`
	// Maps to the patch of a SoftwareIdentity.
	Patch *bool `protobuf:"varint,5,opt,name=patch,proto3,oneof" json:"patch,omitempty"`
	// Specifies the full content of the SWID tag.
	Text *AttachedText `protobuf:"bytes,6,opt,name=text,proto3,oneof" json:"text,omitempty"`
	// The URL to the SWID file.
	Url *string `protobuf:"bytes,7,opt,name=url,proto3,oneof" json:"url,omitempty"`
}

func (x *Swid) Reset() {
	*x = Swid{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Swid) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Swid) ProtoMessage() {}

func (x *Swid) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Swid.ProtoReflect.Descriptor instead.
func (*Swid) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{20}
}

func (x *Swid) GetTagId() string {
	if x != nil {
		return x.TagId
	}
	return ""
}

func (x *Swid) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Swid) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *Swid) GetTagVersion() int32 {
	if x != nil && x.TagVersion != nil {
		return *x.TagVersion
	}
	return 0
}

func (x *Swid) GetPatch() bool {
	if x != nil && x.Patch != nil {
		return *x.Patch
	}
	return false
}

func (x *Swid) GetText() *AttachedText {
	if x != nil {
		return x.Text
	}
	return nil
}

func (x *Swid) GetUrl() string {
	if x != nil && x.Url != nil {
		return *x.Url
	}
	return ""
}

// Specifies a tool (manual or automated).
type Tool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The vendor of the tool used to create the BOM.
	Vendor *string `protobuf:"bytes,1,opt,name=vendor,proto3,oneof" json:"vendor,omitempty"`
	// The name of the tool used to create the BOM.
	Name *string `protobuf:"bytes,2,opt,name=name,proto3,oneof" json:"name,omitempty"`
	// The version of the tool used to create the BOM.
	Version *string `protobuf:"bytes,3,opt,name=version,proto3,oneof" json:"version,omitempty"`
	Hashes  []*Hash `protobuf:"bytes,4,rep,name=hashes,proto3" json:"hashes,omitempty"`
}

func (x *Tool) Reset() {
	*x = Tool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tool) ProtoMessage() {}

func (x *Tool) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tool.ProtoReflect.Descriptor instead.
func (*Tool) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{21}
}

func (x *Tool) GetVendor() string {
	if x != nil && x.Vendor != nil {
		return *x.Vendor
	}
	return ""
}

func (x *Tool) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Tool) GetVersion() string {
	if x != nil && x.Version != nil {
		return *x.Version
	}
	return ""
}

func (x *Tool) GetHashes() []*Hash {
	if x != nil {
		return x.Hashes
	}
	return nil
}

// Specifies a property
type Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value *string `protobuf:"bytes,2,opt,name=value,proto3,oneof" json:"value,omitempty"`
}

func (x *Property) Reset() {
	*x = Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{22}
}

func (x *Property) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Property) GetValue() string {
	if x != nil && x.Value != nil {
		return *x.Value
	}
	return ""
}

type Composition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates the aggregate completeness
	Aggregate Aggregate `protobuf:"varint,1,opt,name=aggregate,proto3,enum=cyclonedx.v1_3.Aggregate" json:"aggregate,omitempty"`
	// The assemblies the aggregate completeness applies to
	Assemblies []string `protobuf:"bytes,2,rep,name=assemblies,proto3" json:"assemblies,omitempty"`
	// The dependencies the aggregate completeness applies to
	Dependencies []string `protobuf:"bytes,3,rep,name=dependencies,proto3" json:"dependencies,omitempty"`
}

func (x *Composition) Reset() {
	*x = Composition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Composition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Composition) ProtoMessage() {}

func (x *Composition) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Composition.ProtoReflect.Descriptor instead.
func (*Composition) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{23}
}

func (x *Composition) GetAggregate() Aggregate {
	if x != nil {
		return x.Aggregate
	}
	return Aggregate_AGGREGATE_NOT_SPECIFIED
}

func (x *Composition) GetAssemblies() []string {
	if x != nil {
		return x.Assemblies
	}
	return nil
}

func (x *Composition) GetDependencies() []string {
	if x != nil {
		return x.Dependencies
	}
	return nil
}

type EvidenceCopyright struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Copyright text
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *EvidenceCopyright) Reset() {
	*x = EvidenceCopyright{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EvidenceCopyright) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EvidenceCopyright) ProtoMessage() {}

func (x *EvidenceCopyright) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EvidenceCopyright.ProtoReflect.Descriptor instead.
func (*EvidenceCopyright) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{24}
}

func (x *EvidenceCopyright) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type Evidence struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Licenses  []*LicenseChoice     `protobuf:"bytes,1,rep,name=licenses,proto3" json:"licenses,omitempty"`
	Copyright []*EvidenceCopyright `protobuf:"bytes,2,rep,name=copyright,proto3" json:"copyright,omitempty"`
}

func (x *Evidence) Reset() {
	*x = Evidence{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_cdx_bom_1_3_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Evidence) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Evidence) ProtoMessage() {}

func (x *Evidence) ProtoReflect() protoreflect.Message {
	mi := &file_api_cdx_bom_1_3_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Evidence.ProtoReflect.Descriptor instead.
func (*Evidence) Descriptor() ([]byte, []int) {
	return file_api_cdx_bom_1_3_proto_rawDescGZIP(), []int{25}
}

func (x *Evidence) GetLicenses() []*LicenseChoice {
	if x != nil {
		return x.Licenses
	}
	return nil
}

func (x *Evidence) GetCopyright() []*EvidenceCopyright {
	if x != nil {
		return x.Copyright
	}
	return nil
}

var File_api_cdx_bom_1_3_proto protoreflect.FileDescriptor

var file_api_cdx_bom_1_3_proto_rawDesc = []byte{
	0x0a, 0x15, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x64, 0x78, 0x2f, 0x62, 0x6f, 0x6d, 0x2d, 0x31, 0x2e,
	0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x01, 0x0a, 0x0c, 0x41, 0x74, 0x74,
	0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x1f, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x22, 0x9c, 0x04, 0x0a, 0x03, 0x42, 0x6f, 0x6d, 0x12, 0x21,
	0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x28, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63,
	0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x02, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x79, 0x63, 0x6c,
	0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73,
	0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33,
	0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x64, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33,
	0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x92, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x12, 0x15, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x03, 0x75, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x3f,
	0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x02, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x45, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x74, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75, 0x69, 0x64, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x72, 0x42, 0x0a,
	0x0a, 0x08, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x94, 0x09, 0x0a, 0x09, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x09,
	0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x6d, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1c,
	0x0a, 0x07, 0x62, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x01, 0x52, 0x06, 0x62, 0x6f, 0x6d, 0x52, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x08,
	0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x48, 0x02, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x06, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x21, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x05, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x06, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x2e, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x48, 0x07, 0x52, 0x05, 0x73, 0x63, 0x6f,
	0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64,
	0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x06, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64,
	0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x68,
	0x6f, 0x69, 0x63, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x21,
	0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01,
	0x01, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x09,
	0x52, 0x03, 0x63, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x6c,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0a, 0x52, 0x04, 0x70, 0x75, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x12, 0x2d, 0x0a, 0x04, 0x73, 0x77, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33,
	0x2e, 0x53, 0x77, 0x69, 0x64, 0x48, 0x0b, 0x52, 0x04, 0x73, 0x77, 0x69, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x1f, 0x0a, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x0c, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x39, 0x0a, 0x08, 0x70, 0x65, 0x64, 0x69, 0x67, 0x72, 0x65, 0x65, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e,
	0x76, 0x31, 0x5f, 0x33, 0x2e, 0x50, 0x65, 0x64, 0x69, 0x67, 0x72, 0x65, 0x65, 0x48, 0x0d, 0x52,
	0x08, 0x70, 0x65, 0x64, 0x69, 0x67, 0x72, 0x65, 0x65, 0x88, 0x01, 0x01, 0x12, 0x52, 0x0a, 0x13,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x79, 0x63, 0x6c,
	0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x15,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78,
	0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x38, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65,
	0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e,
	0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x52, 0x08, 0x65, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f,
	0x6d, 0x69, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x6f,
	0x6d, 0x5f, 0x72, 0x65, 0x66, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x63, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x75, 0x72, 0x6c, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x73, 0x77, 0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x65, 0x64, 0x69, 0x67, 0x72, 0x65,
	0x65, 0x22, 0x58, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04, 0x66, 0x6c, 0x6f, 0x77, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64,
	0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6c, 0x6f, 0x77, 0x52,
	0x04, 0x66, 0x6c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x5e, 0x0a, 0x0a, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x66, 0x12, 0x3e, 0x0a, 0x0c, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31,
	0x5f, 0x33, 0x2e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0c, 0x64,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x65, 0x0a, 0x04, 0x44,
	0x69, 0x66, 0x66, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31,
	0x5f, 0x33, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01,
	0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x75,
	0x72, 0x6c, 0x22, 0xb9, 0x01, 0x0a, 0x11, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65,
	0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78,
	0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x06, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x47,
	0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x29, 0x0a, 0x03, 0x61, 0x6c, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x17, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e,
	0x76, 0x31, 0x5f, 0x33, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x52, 0x03, 0x61, 0x6c,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x12, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x00, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01,
	0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x22, 0x95, 0x02, 0x0a, 0x05, 0x49, 0x73, 0x73, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x79, 0x63,
	0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x13, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x79, 0x63,
	0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x48, 0x03, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x42,
	0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42,
	0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x09, 0x0a, 0x07, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x49, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0x70, 0x0a, 0x0d, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e,
	0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a,
	0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x22, 0x9b, 0x01, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x12, 0x10, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x02, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x79, 0x63, 0x6c,
	0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x48, 0x01, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88,
	0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0xc8, 0x04, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x88, 0x01,
	0x01, 0x12, 0x2a, 0x0a, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f,
	0x33, 0x2e, 0x54, 0x6f, 0x6f, 0x6c, 0x52, 0x05, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x12, 0x3f, 0x0a,
	0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e,
	0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x07, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x73, 0x12, 0x3c,
	0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31,
	0x5f, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x48, 0x01, 0x52, 0x09,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x0b,
	0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31,
	0x5f, 0x33, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x02, 0x52, 0x0b, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x12, 0x45, 0x0a, 0x08, 0x73, 0x75, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x79,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x48, 0x03, 0x52, 0x08, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x72, 0x88, 0x01, 0x01,
	0x12, 0x3e, 0x0a, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x48, 0x04, 0x52, 0x08, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x38, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78,
	0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c,
	0x69, 0x65, 0x72, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73,
	0x22, 0x83, 0x01, 0x0a, 0x15, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x01, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x19,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52,
	0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x14, 0x4f, 0x72, 0x67, 0x61, 0x6e,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x3f, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x63, 0x79,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x4f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x22, 0xab, 0x01, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x37,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63,
	0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x69, 0x66, 0x66, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64,
	0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x44, 0x69, 0x66, 0x66, 0x48, 0x00, 0x52, 0x04, 0x64,
	0x69, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x31, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f,
	0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x64, 0x69,
	0x66, 0x66, 0x22, 0xbf, 0x02, 0x0a, 0x08, 0x50, 0x65, 0x64, 0x69, 0x67, 0x72, 0x65, 0x65, 0x12,
	0x37, 0x0a, 0x09, 0x61, 0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x61,
	0x6e, 0x63, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x65, 0x6e, 0x64, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x65, 0x6e,
	0x64, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x35, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e,
	0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x73, 0x12, 0x2f,
	0x0a, 0x07, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33,
	0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x07, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12,
	0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x05, 0x6e, 0x6f, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x73, 0x22, 0xf7, 0x05, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x07, 0x62, 0x6f, 0x6d, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x06, 0x62, 0x6f, 0x6d, 0x52, 0x65, 0x66, 0x88, 0x01, 0x01, 0x12, 0x45,
	0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f,
	0x33, 0x2e, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x45, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x48, 0x01, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64,
	0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x88, 0x01, 0x01,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x25, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x65,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x0d, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x48,
	0x05, 0x52, 0x0d, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x10, 0x78, 0x5f, 0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x62,
	0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x06, 0x52,
	0x0e, 0x78, 0x54, 0x72, 0x75, 0x73, 0x74, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x88,
	0x01, 0x01, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f,
	0x33, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x08, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63,
	0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x08, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x52, 0x0a, 0x13, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x12, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x79,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76,
	0x31, 0x5f, 0x33, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x0a, 0x70, 0x72,
	0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x62, 0x6f, 0x6d,
	0x5f, 0x72, 0x65, 0x66, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x78, 0x5f,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x5f, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x61, 0x72, 0x79, 0x22, 0x96,
	0x02, 0x0a, 0x04, 0x53, 0x77, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x74, 0x61, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x67, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x74, 0x61, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x67, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x19, 0x0a, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x02, 0x52, 0x05, 0x70, 0x61, 0x74, 0x63, 0x68, 0x88,
	0x01, 0x01, 0x12, 0x35, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f,
	0x33, 0x2e, 0x41, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x54, 0x65, 0x78, 0x74, 0x48, 0x03,
	0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x75, 0x72, 0x6c,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x04, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x74, 0x61, 0x67, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x70, 0x61, 0x74, 0x63, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0xa9, 0x01, 0x0a, 0x04, 0x54, 0x6f, 0x6f, 0x6c,
	0x12, 0x1b, 0x0a, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x06, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64,
	0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x52, 0x06, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x73, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x42, 0x07,
	0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x88, 0x01, 0x01, 0x42, 0x08,
	0x0a, 0x06, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x09, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x63, 0x79,
	0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x52, 0x09, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x6d, 0x62, 0x6c, 0x69, 0x65,
	0x73, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x22, 0x27, 0x0a, 0x11, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63,
	0x65, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x86,
	0x01, 0x0a, 0x08, 0x45, 0x76, 0x69, 0x64, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x79, 0x63, 0x6c, 0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x08, 0x6c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x09, 0x63, 0x6f, 0x70, 0x79, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x79, 0x63, 0x6c,
	0x6f, 0x6e, 0x65, 0x64, 0x78, 0x2e, 0x76, 0x31, 0x5f, 0x33, 0x2e, 0x45, 0x76, 0x69, 0x64, 0x65,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x52, 0x09, 0x63, 0x6f,
	0x70, 0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x2a, 0x97, 0x02, 0x0a, 0x0e, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x4c,
	0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4c,
	0x4c, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x50, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x52, 0x41, 0x4d, 0x45, 0x57, 0x4f, 0x52, 0x4b, 0x10,
	0x02, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x4c, 0x49, 0x42, 0x52, 0x41, 0x52, 0x59, 0x10, 0x03, 0x12, 0x23, 0x0a,
	0x1f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d,
	0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x10, 0x05, 0x12, 0x17, 0x0a,
	0x13, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x46, 0x49, 0x4c, 0x45, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e,
	0x45, 0x52, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49,
	0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x49, 0x52, 0x4d, 0x57, 0x41, 0x52, 0x45, 0x10,
	0x08, 0x2a, 0x82, 0x01, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x12,
	0x0a, 0x0e, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f,
	0x49, 0x4e, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x44, 0x41, 0x54,
	0x41, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x10,
	0x02, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x42,
	0x49, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x03, 0x12,
	0x15, 0x0a, 0x11, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x46, 0x4c, 0x4f, 0x57, 0x5f, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x04, 0x2a, 0xd5, 0x04, 0x0a, 0x15, 0x45, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x1d, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x46,
	0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x10, 0x00, 0x12, 0x1f, 0x0a, 0x1b, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f,
	0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x56,
	0x43, 0x53, 0x10, 0x01, 0x12, 0x29, 0x0a, 0x25, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x45, 0x52, 0x10, 0x02, 0x12,
	0x23, 0x0a, 0x1f, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x45,
	0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x45, 0x42, 0x53, 0x49,
	0x54, 0x45, 0x10, 0x03, 0x12, 0x26, 0x0a, 0x22, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x41, 0x44, 0x56, 0x49, 0x53, 0x4f, 0x52, 0x49, 0x45, 0x53, 0x10, 0x04, 0x12, 0x1f, 0x0a, 0x1b,
	0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x4f, 0x4d, 0x10, 0x05, 0x12, 0x28, 0x0a,
	0x24, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4d, 0x41, 0x49, 0x4c, 0x49, 0x4e, 0x47,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x06, 0x12, 0x22, 0x0a, 0x1e, 0x45, 0x58, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x53, 0x4f, 0x43, 0x49, 0x41, 0x4c, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x45,
	0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43,
	0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x54, 0x10, 0x08, 0x12, 0x29, 0x0a,
	0x25, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e,
	0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x58, 0x54, 0x45,
	0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x0a, 0x12, 0x28, 0x0a,
	0x24, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45,
	0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x52, 0x49, 0x42,
	0x55, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x0b, 0x12, 0x23, 0x0a, 0x1f, 0x45, 0x58, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59,
	0x50, 0x45, 0x5f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x10, 0x0c, 0x12, 0x26, 0x0a, 0x22,
	0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x4d, 0x45,
	0x54, 0x41, 0x10, 0x0d, 0x12, 0x28, 0x0a, 0x24, 0x45, 0x58, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c,
	0x5f, 0x52, 0x45, 0x46, 0x45, 0x52, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x0e, 0x2a, 0xb7,
	0x02, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x41,
	0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x5f, 0x4d, 0x44, 0x5f, 0x35, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x5f, 0x53, 0x48, 0x41,
	0x5f, 0x31, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47,
	0x5f, 0x53, 0x48, 0x41, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41,
	0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x33, 0x38, 0x34, 0x10, 0x04,
	0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x5f, 0x53, 0x48, 0x41,
	0x5f, 0x35, 0x31, 0x32, 0x10, 0x05, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41,
	0x4c, 0x47, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x33, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x06, 0x12, 0x16,
	0x0a, 0x12, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x33,
	0x5f, 0x33, 0x38, 0x34, 0x10, 0x07, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41,
	0x4c, 0x47, 0x5f, 0x53, 0x48, 0x41, 0x5f, 0x33, 0x5f, 0x35, 0x31, 0x32, 0x10, 0x08, 0x12, 0x1a,
	0x0a, 0x16, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x5f, 0x42, 0x4c, 0x41, 0x4b, 0x45,
	0x5f, 0x32, 0x5f, 0x42, 0x5f, 0x32, 0x35, 0x36, 0x10, 0x09, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x41,
	0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x5f, 0x42, 0x4c, 0x41, 0x4b, 0x45, 0x5f, 0x32, 0x5f, 0x42,
	0x5f, 0x33, 0x38, 0x34, 0x10, 0x0a, 0x12, 0x1a, 0x0a, 0x16, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41,
	0x4c, 0x47, 0x5f, 0x42, 0x4c, 0x41, 0x4b, 0x45, 0x5f, 0x32, 0x5f, 0x42, 0x5f, 0x35, 0x31, 0x32,
	0x10, 0x0b, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x41, 0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x5f, 0x42,
	0x4c, 0x41, 0x4b, 0x45, 0x5f, 0x33, 0x10, 0x0c, 0x2a, 0x9e, 0x01, 0x0a, 0x13, 0x49, 0x73, 0x73,
	0x75, 0x65, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x19, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00, 0x12,
	0x1f, 0x0a, 0x1b, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46,
	0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x46, 0x45, 0x43, 0x54, 0x10, 0x01,
	0x12, 0x24, 0x0a, 0x20, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x48, 0x41, 0x4e, 0x43, 0x45,
	0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x49, 0x53, 0x53, 0x55, 0x45, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x45, 0x43, 0x55, 0x52, 0x49, 0x54, 0x59, 0x10, 0x03, 0x2a, 0xc3, 0x01, 0x0a, 0x13, 0x50, 0x61,
	0x74, 0x63, 0x68, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53,
	0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x10, 0x00,
	0x12, 0x23, 0x0a, 0x1f, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49,
	0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x4f, 0x46, 0x46, 0x49, 0x43,
	0x49, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x43,
	0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x4d, 0x4f,
	0x4e, 0x4b, 0x45, 0x59, 0x10, 0x02, 0x12, 0x21, 0x0a, 0x1d, 0x50, 0x41, 0x54, 0x43, 0x48, 0x5f,
	0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x42,
	0x41, 0x43, 0x4b, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x03, 0x12, 0x24, 0x0a, 0x20, 0x50, 0x41, 0x54,
	0x43, 0x48, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f,
	0x4e, 0x5f, 0x43, 0x48, 0x45, 0x52, 0x52, 0x59, 0x5f, 0x50, 0x49, 0x43, 0x4b, 0x10, 0x04, 0x2a,
	0x5a, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x43, 0x4f, 0x50,
	0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12,
	0x12, 0x0a, 0x0e, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x51, 0x55, 0x49, 0x52, 0x45,
	0x44, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x43, 0x4f, 0x50, 0x45, 0x5f, 0x4f, 0x50, 0x54,
	0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x43, 0x4f, 0x50, 0x45,
	0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x44, 0x10, 0x03, 0x2a, 0xc7, 0x01, 0x0a, 0x09,
	0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x47, 0x47,
	0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47,
	0x41, 0x54, 0x45, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x12, 0x18,
	0x0a, 0x14, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f,
	0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x47, 0x47, 0x52,
	0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45,
	0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x4f, 0x4e, 0x4c,
	0x59, 0x10, 0x03, 0x12, 0x29, 0x0a, 0x25, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45,
	0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x54, 0x48, 0x49, 0x52,
	0x44, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x05, 0x42, 0x0b, 0x5a, 0x09, 0x63, 0x64, 0x78, 0x31, 0x33, 0x3b, 0x61,
	0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_cdx_bom_1_3_proto_rawDescOnce sync.Once
	file_api_cdx_bom_1_3_proto_rawDescData = file_api_cdx_bom_1_3_proto_rawDesc
)

func file_api_cdx_bom_1_3_proto_rawDescGZIP() []byte {
	file_api_cdx_bom_1_3_proto_rawDescOnce.Do(func() {
		file_api_cdx_bom_1_3_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_cdx_bom_1_3_proto_rawDescData)
	})
	return file_api_cdx_bom_1_3_proto_rawDescData
}

var file_api_cdx_bom_1_3_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_api_cdx_bom_1_3_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_api_cdx_bom_1_3_proto_goTypes = []interface{}{
	(Classification)(0),           // 0: cyclonedx.v1_3.Classification
	(DataFlow)(0),                 // 1: cyclonedx.v1_3.DataFlow
	(ExternalReferenceType)(0),    // 2: cyclonedx.v1_3.ExternalReferenceType
	(HashAlg)(0),                  // 3: cyclonedx.v1_3.HashAlg
	(IssueClassification)(0),      // 4: cyclonedx.v1_3.IssueClassification
	(PatchClassification)(0),      // 5: cyclonedx.v1_3.PatchClassification
	(Scope)(0),                    // 6: cyclonedx.v1_3.Scope
	(Aggregate)(0),                // 7: cyclonedx.v1_3.Aggregate
	(*AttachedText)(nil),          // 8: cyclonedx.v1_3.AttachedText
	(*Bom)(nil),                   // 9: cyclonedx.v1_3.Bom
	(*Commit)(nil),                // 10: cyclonedx.v1_3.Commit
	(*Component)(nil),             // 11: cyclonedx.v1_3.Component
	(*DataClassification)(nil),    // 12: cyclonedx.v1_3.DataClassification
	(*Dependency)(nil),            // 13: cyclonedx.v1_3.Dependency
	(*Diff)(nil),                  // 14: cyclonedx.v1_3.Diff
	(*ExternalReference)(nil),     // 15: cyclonedx.v1_3.ExternalReference
	(*Hash)(nil),                  // 16: cyclonedx.v1_3.Hash
	(*IdentifiableAction)(nil),    // 17: cyclonedx.v1_3.IdentifiableAction
	(*Issue)(nil),                 // 18: cyclonedx.v1_3.Issue
	(*Source)(nil),                // 19: cyclonedx.v1_3.Source
	(*LicenseChoice)(nil),         // 20: cyclonedx.v1_3.LicenseChoice
	(*License)(nil),               // 21: cyclonedx.v1_3.License
	(*Metadata)(nil),              // 22: cyclonedx.v1_3.Metadata
	(*OrganizationalContact)(nil), // 23: cyclonedx.v1_3.OrganizationalContact
	(*OrganizationalEntity)(nil),  // 24: cyclonedx.v1_3.OrganizationalEntity
	(*Patch)(nil),                 // 25: cyclonedx.v1_3.Patch
	(*Pedigree)(nil),              // 26: cyclonedx.v1_3.Pedigree
	(*Service)(nil),               // 27: cyclonedx.v1_3.Service
	(*Swid)(nil),                  // 28: cyclonedx.v1_3.Swid
	(*Tool)(nil),                  // 29: cyclonedx.v1_3.Tool
	(*Property)(nil),              // 30: cyclonedx.v1_3.Property
	(*Composition)(nil),           // 31: cyclonedx.v1_3.Composition
	(*EvidenceCopyright)(nil),     // 32: cyclonedx.v1_3.EvidenceCopyright
	(*Evidence)(nil),              // 33: cyclonedx.v1_3.Evidence
	(*timestamppb.Timestamp)(nil), // 34: google.protobuf.Timestamp
}
var file_api_cdx_bom_1_3_proto_depIdxs = []int32{
	22, // 0: cyclonedx.v1_3.Bom.metadata:type_name -> cyclonedx.v1_3.Metadata
	11, // 1: cyclonedx.v1_3.Bom.components:type_name -> cyclonedx.v1_3.Component
	27, // 2: cyclonedx.v1_3.Bom.services:type_name -> cyclonedx.v1_3.Service
	15, // 3: cyclonedx.v1_3.Bom.external_references:type_name -> cyclonedx.v1_3.ExternalReference
	13, // 4: cyclonedx.v1_3.Bom.dependencies:type_name -> cyclonedx.v1_3.Dependency
	31, // 5: cyclonedx.v1_3.Bom.compositions:type_name -> cyclonedx.v1_3.Composition
	17, // 6: cyclonedx.v1_3.Commit.author:type_name -> cyclonedx.v1_3.IdentifiableAction
	17, // 7: cyclonedx.v1_3.Commit.committer:type_name -> cyclonedx.v1_3.IdentifiableAction
	0,  // 8: cyclonedx.v1_3.Component.type:type_name -> cyclonedx.v1_3.Classification
	24, // 9: cyclonedx.v1_3.Component.supplier:type_name -> cyclonedx.v1_3.OrganizationalEntity
	6,  // 10: cyclonedx.v1_3.Component.scope:type_name -> cyclonedx.v1_3.Scope
	16, // 11: cyclonedx.v1_3.Component.hashes:type_name -> cyclonedx.v1_3.Hash
	20, // 12: cyclonedx.v1_3.Component.licenses:type_name -> cyclonedx.v1_3.LicenseChoice
	28, // 13: cyclonedx.v1_3.Component.swid:type_name -> cyclonedx.v1_3.Swid
	26, // 14: cyclonedx.v1_3.Component.pedigree:type_name -> cyclonedx.v1_3.Pedigree
	15, // 15: cyclonedx.v1_3.Component.external_references:type_name -> cyclonedx.v1_3.ExternalReference
	11, // 16: cyclonedx.v1_3.Component.components:type_name -> cyclonedx.v1_3.Component
	30, // 17: cyclonedx.v1_3.Component.properties:type_name -> cyclonedx.v1_3.Property
	33, // 18: cyclonedx.v1_3.Component.evidence:type_name -> cyclonedx.v1_3.Evidence
	1,  // 19: cyclonedx.v1_3.DataClassification.flow:type_name -> cyclonedx.v1_3.DataFlow
	13, // 20: cyclonedx.v1_3.Dependency.dependencies:type_name -> cyclonedx.v1_3.Dependency
	8,  // 21: cyclonedx.v1_3.Diff.text:type_name -> cyclonedx.v1_3.AttachedText
	2,  // 22: cyclonedx.v1_3.ExternalReference.type:type_name -> cyclonedx.v1_3.ExternalReferenceType
	16, // 23: cyclonedx.v1_3.ExternalReference.hashes:type_name -> cyclonedx.v1_3.Hash
	3,  // 24: cyclonedx.v1_3.Hash.alg:type_name -> cyclonedx.v1_3.HashAlg
	34, // 25: cyclonedx.v1_3.IdentifiableAction.timestamp:type_name -> google.protobuf.Timestamp
	4,  // 26: cyclonedx.v1_3.Issue.type:type_name -> cyclonedx.v1_3.IssueClassification
	19, // 27: cyclonedx.v1_3.Issue.source:type_name -> cyclonedx.v1_3.Source
	21, // 28: cyclonedx.v1_3.LicenseChoice.license:type_name -> cyclonedx.v1_3.License
	8,  // 29: cyclonedx.v1_3.License.text:type_name -> cyclonedx.v1_3.AttachedText
	34, // 30: cyclonedx.v1_3.Metadata.timestamp:type_name -> google.protobuf.Timestamp
	29, // 31: cyclonedx.v1_3.Metadata.tools:type_name -> cyclonedx.v1_3.Tool
	23, // 32: cyclonedx.v1_3.Metadata.authors:type_name -> cyclonedx.v1_3.OrganizationalContact
	11, // 33: cyclonedx.v1_3.Metadata.component:type_name -> cyclonedx.v1_3.Component
	24, // 34: cyclonedx.v1_3.Metadata.manufacture:type_name -> cyclonedx.v1_3.OrganizationalEntity
	24, // 35: cyclonedx.v1_3.Metadata.supplier:type_name -> cyclonedx.v1_3.OrganizationalEntity
	20, // 36: cyclonedx.v1_3.Metadata.licenses:type_name -> cyclonedx.v1_3.LicenseChoice
	30, // 37: cyclonedx.v1_3.Metadata.properties:type_name -> cyclonedx.v1_3.Property
	23, // 38: cyclonedx.v1_3.OrganizationalEntity.contact:type_name -> cyclonedx.v1_3.OrganizationalContact
	5,  // 39: cyclonedx.v1_3.Patch.type:type_name -> cyclonedx.v1_3.PatchClassification
	14, // 40: cyclonedx.v1_3.Patch.diff:type_name -> cyclonedx.v1_3.Diff
	18, // 41: cyclonedx.v1_3.Patch.resolves:type_name -> cyclonedx.v1_3.Issue
	11, // 42: cyclonedx.v1_3.Pedigree.ancestors:type_name -> cyclonedx.v1_3.Component
	11, // 43: cyclonedx.v1_3.Pedigree.descendants:type_name -> cyclonedx.v1_3.Component
	11, // 44: cyclonedx.v1_3.Pedigree.variants:type_name -> cyclonedx.v1_3.Component
	10, // 45: cyclonedx.v1_3.Pedigree.commits:type_name -> cyclonedx.v1_3.Commit
	25, // 46: cyclonedx.v1_3.Pedigree.patches:type_name -> cyclonedx.v1_3.Patch
	24, // 47: cyclonedx.v1_3.Service.provider:type_name -> cyclonedx.v1_3.OrganizationalEntity
	12, // 48: cyclonedx.v1_3.Service.data:type_name -> cyclonedx.v1_3.DataClassification
	20, // 49: cyclonedx.v1_3.Service.licenses:type_name -> cyclonedx.v1_3.LicenseChoice
	15, // 50: cyclonedx.v1_3.Service.external_references:type_name -> cyclonedx.v1_3.ExternalReference
	27, // 51: cyclonedx.v1_3.Service.services:type_name -> cyclonedx.v1_3.Service
	30, // 52: cyclonedx.v1_3.Service.properties:type_name -> cyclonedx.v1_3.Property
	8,  // 53: cyclonedx.v1_3.Swid.text:type_name -> cyclonedx.v1_3.AttachedText
	16, // 54: cyclonedx.v1_3.Tool.hashes:type_name -> cyclonedx.v1_3.Hash
	7,  // 55: cyclonedx.v1_3.Composition.aggregate:type_name -> cyclonedx.v1_3.Aggregate
	20, // 56: cyclonedx.v1_3.Evidence.licenses:type_name -> cyclonedx.v1_3.LicenseChoice
	32, // 57: cyclonedx.v1_3.Evidence.copyright:type_name -> cyclonedx.v1_3.EvidenceCopyright
	58, // [58:58] is the sub-list for method output_type
	58, // [58:58] is the sub-list for method input_type
	58, // [58:58] is the sub-list for extension type_name
	58, // [58:58] is the sub-list for extension extendee
	0,  // [0:58] is the sub-list for field type_name
}

func init() { file_api_cdx_bom_1_3_proto_init() }
func file_api_cdx_bom_1_3_proto_init() {
	if File_api_cdx_bom_1_3_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_cdx_bom_1_3_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AttachedText); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Component); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataClassification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Dependency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Diff); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalReference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentifiableAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Issue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*License); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationalContact); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrganizationalEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Patch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pedigree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Swid); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Composition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EvidenceCopyright); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_cdx_bom_1_3_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Evidence); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_cdx_bom_1_3_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_api_cdx_bom_1_3_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_api_cdx_bom_1_3_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_api_cdx_bom_1_3_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_api_cdx_bom_1_3_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_api_cdx_bom_1_3_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_api_cdx_bom_1_3_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_api_cdx_bom_1_3_proto_msgTypes[10].OneofWrappers = []interface{}{}
	file_api_cdx_bom_1_3_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_api_cdx_bom_1_3_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*LicenseChoice_License)(nil),
		(*LicenseChoice_Expression)(nil),
	}
	file_api_cdx_bom_1_3_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*License_Id)(nil),
		(*License_Name)(nil),
	}
	file_api_cdx_bom_1_3_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_api_cdx_bom_1_3_proto_msgTypes[15].OneofWrappers = []interface{}{}
	file_api_cdx_bom_1_3_proto_msgTypes[16].OneofWrappers = []interface{}{}
	file_api_cdx_bom_1_3_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_api_cdx_bom_1_3_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_api_cdx_bom_1_3_proto_msgTypes[19].OneofWrappers = []interface{}{}
	file_api_cdx_bom_1_3_proto_msgTypes[20].OneofWrappers = []interface{}{}
	file_api_cdx_bom_1_3_proto_msgTypes[21].OneofWrappers = []interface{}{}
	file_api_cdx_bom_1_3_proto_msgTypes[22].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_cdx_bom_1_3_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_cdx_bom_1_3_proto_goTypes,
		DependencyIndexes: file_api_cdx_bom_1_3_proto_depIdxs,
		EnumInfos:         file_api_cdx_bom_1_3_proto_enumTypes,
		MessageInfos:      file_api_cdx_bom_1_3_proto_msgTypes,
	}.Build()
	File_api_cdx_bom_1_3_proto = out.File
	file_api_cdx_bom_1_3_proto_rawDesc = nil
	file_api_cdx_bom_1_3_proto_goTypes = nil
	file_api_cdx_bom_1_3_proto_depIdxs = nil
}
