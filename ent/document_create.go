// Code generated by ent, DO NOT EDIT.
// ------------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// ------------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------
package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bom-squad/protobom/ent/document"
	"github.com/bom-squad/protobom/ent/metadata"
	"github.com/bom-squad/protobom/ent/nodelist"
	"github.com/bom-squad/protobom/pkg/sbom"
)

// DocumentCreate is the builder for creating a Document entity.
type DocumentCreate struct {
	config
	mutation *DocumentMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetMetadata sets the "metadata" field.
func (dc *DocumentCreate) SetMetadata(s *sbom.Metadata) *DocumentCreate {
	dc.mutation.SetMetadata(s)
	return dc
}

// SetNodeList sets the "node_list" field.
func (dc *DocumentCreate) SetNodeList(sl *sbom.NodeList) *DocumentCreate {
	dc.mutation.SetNodeList(sl)
	return dc
}

// SetDocumentMetadataID sets the "document_metadata" edge to the Metadata entity by ID.
func (dc *DocumentCreate) SetDocumentMetadataID(id string) *DocumentCreate {
	dc.mutation.SetDocumentMetadataID(id)
	return dc
}

// SetDocumentMetadata sets the "document_metadata" edge to the Metadata entity.
func (dc *DocumentCreate) SetDocumentMetadata(m *Metadata) *DocumentCreate {
	return dc.SetDocumentMetadataID(m.ID)
}

// SetDocumentNodeListID sets the "document_node_list" edge to the NodeList entity by ID.
func (dc *DocumentCreate) SetDocumentNodeListID(id int) *DocumentCreate {
	dc.mutation.SetDocumentNodeListID(id)
	return dc
}

// SetDocumentNodeList sets the "document_node_list" edge to the NodeList entity.
func (dc *DocumentCreate) SetDocumentNodeList(n *NodeList) *DocumentCreate {
	return dc.SetDocumentNodeListID(n.ID)
}

// Mutation returns the DocumentMutation object of the builder.
func (dc *DocumentCreate) Mutation() *DocumentMutation {
	return dc.mutation
}

// Save creates the Document in the database.
func (dc *DocumentCreate) Save(ctx context.Context) (*Document, error) {
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DocumentCreate) SaveX(ctx context.Context) *Document {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DocumentCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DocumentCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DocumentCreate) check() error {
	if _, ok := dc.mutation.Metadata(); !ok {
		return &ValidationError{Name: "metadata", err: errors.New(`ent: missing required field "Document.metadata"`)}
	}
	if _, ok := dc.mutation.NodeList(); !ok {
		return &ValidationError{Name: "node_list", err: errors.New(`ent: missing required field "Document.node_list"`)}
	}
	if _, ok := dc.mutation.DocumentMetadataID(); !ok {
		return &ValidationError{Name: "document_metadata", err: errors.New(`ent: missing required edge "Document.document_metadata"`)}
	}
	if _, ok := dc.mutation.DocumentNodeListID(); !ok {
		return &ValidationError{Name: "document_node_list", err: errors.New(`ent: missing required edge "Document.document_node_list"`)}
	}
	return nil
}

func (dc *DocumentCreate) sqlSave(ctx context.Context) (*Document, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DocumentCreate) createSpec() (*Document, *sqlgraph.CreateSpec) {
	var (
		_node = &Document{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(document.Table, sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt))
	)
	_spec.OnConflict = dc.conflict
	if value, ok := dc.mutation.Metadata(); ok {
		_spec.SetField(document.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	if value, ok := dc.mutation.NodeList(); ok {
		_spec.SetField(document.FieldNodeList, field.TypeJSON, value)
		_node.NodeList = value
	}
	if nodes := dc.mutation.DocumentMetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   document.DocumentMetadataTable,
			Columns: []string{document.DocumentMetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.metadata_document = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.DocumentNodeListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   document.DocumentNodeListTable,
			Columns: []string{document.DocumentNodeListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodelist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.node_list_document = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Document.Create().
//		SetMetadata(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DocumentUpsert) {
//			SetMetadata(v+v).
//		}).
//		Exec(ctx)
func (dc *DocumentCreate) OnConflict(opts ...sql.ConflictOption) *DocumentUpsertOne {
	dc.conflict = opts
	return &DocumentUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DocumentCreate) OnConflictColumns(columns ...string) *DocumentUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DocumentUpsertOne{
		create: dc,
	}
}

type (
	// DocumentUpsertOne is the builder for "upsert"-ing
	//  one Document node.
	DocumentUpsertOne struct {
		create *DocumentCreate
	}

	// DocumentUpsert is the "OnConflict" setter.
	DocumentUpsert struct {
		*sql.UpdateSet
	}
)

// SetMetadata sets the "metadata" field.
func (u *DocumentUpsert) SetMetadata(v *sbom.Metadata) *DocumentUpsert {
	u.Set(document.FieldMetadata, v)
	return u
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateMetadata() *DocumentUpsert {
	u.SetExcluded(document.FieldMetadata)
	return u
}

// SetNodeList sets the "node_list" field.
func (u *DocumentUpsert) SetNodeList(v *sbom.NodeList) *DocumentUpsert {
	u.Set(document.FieldNodeList, v)
	return u
}

// UpdateNodeList sets the "node_list" field to the value that was provided on create.
func (u *DocumentUpsert) UpdateNodeList() *DocumentUpsert {
	u.SetExcluded(document.FieldNodeList)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DocumentUpsertOne) UpdateNewValues() *DocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Document.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DocumentUpsertOne) Ignore() *DocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DocumentUpsertOne) DoNothing() *DocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DocumentCreate.OnConflict
// documentation for more info.
func (u *DocumentUpsertOne) Update(set func(*DocumentUpsert)) *DocumentUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DocumentUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *DocumentUpsertOne) SetMetadata(v *sbom.Metadata) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateMetadata() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateMetadata()
	})
}

// SetNodeList sets the "node_list" field.
func (u *DocumentUpsertOne) SetNodeList(v *sbom.NodeList) *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.SetNodeList(v)
	})
}

// UpdateNodeList sets the "node_list" field to the value that was provided on create.
func (u *DocumentUpsertOne) UpdateNodeList() *DocumentUpsertOne {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateNodeList()
	})
}

// Exec executes the query.
func (u *DocumentUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DocumentCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DocumentUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DocumentUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DocumentUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DocumentCreateBulk is the builder for creating many Document entities in bulk.
type DocumentCreateBulk struct {
	config
	err      error
	builders []*DocumentCreate
	conflict []sql.ConflictOption
}

// Save creates the Document entities in the database.
func (dcb *DocumentCreateBulk) Save(ctx context.Context) ([]*Document, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Document, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DocumentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DocumentCreateBulk) SaveX(ctx context.Context) []*Document {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DocumentCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DocumentCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Document.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DocumentUpsert) {
//			SetMetadata(v+v).
//		}).
//		Exec(ctx)
func (dcb *DocumentCreateBulk) OnConflict(opts ...sql.ConflictOption) *DocumentUpsertBulk {
	dcb.conflict = opts
	return &DocumentUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DocumentCreateBulk) OnConflictColumns(columns ...string) *DocumentUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DocumentUpsertBulk{
		create: dcb,
	}
}

// DocumentUpsertBulk is the builder for "upsert"-ing
// a bulk of Document nodes.
type DocumentUpsertBulk struct {
	create *DocumentCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *DocumentUpsertBulk) UpdateNewValues() *DocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Document.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DocumentUpsertBulk) Ignore() *DocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DocumentUpsertBulk) DoNothing() *DocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DocumentCreateBulk.OnConflict
// documentation for more info.
func (u *DocumentUpsertBulk) Update(set func(*DocumentUpsert)) *DocumentUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DocumentUpsert{UpdateSet: update})
	}))
	return u
}

// SetMetadata sets the "metadata" field.
func (u *DocumentUpsertBulk) SetMetadata(v *sbom.Metadata) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetMetadata(v)
	})
}

// UpdateMetadata sets the "metadata" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateMetadata() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateMetadata()
	})
}

// SetNodeList sets the "node_list" field.
func (u *DocumentUpsertBulk) SetNodeList(v *sbom.NodeList) *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.SetNodeList(v)
	})
}

// UpdateNodeList sets the "node_list" field to the value that was provided on create.
func (u *DocumentUpsertBulk) UpdateNodeList() *DocumentUpsertBulk {
	return u.Update(func(s *DocumentUpsert) {
		s.UpdateNodeList()
	})
}

// Exec executes the query.
func (u *DocumentUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DocumentCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DocumentCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DocumentUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
