// Code generated by ent, DO NOT EDIT.
// ------------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// ------------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------

package metadata

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the metadata type in the database.
	Label = "metadata"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldTools holds the string denoting the tools field in the database.
	FieldTools = "tools"
	// FieldAuthors holds the string denoting the authors field in the database.
	FieldAuthors = "authors"
	// FieldDocumentTypes holds the string denoting the document_types field in the database.
	FieldDocumentTypes = "document_types"
	// EdgeMetadataTools holds the string denoting the metadata_tools edge name in mutations.
	EdgeMetadataTools = "metadata_tools"
	// EdgeMetadataAuthors holds the string denoting the metadata_authors edge name in mutations.
	EdgeMetadataAuthors = "metadata_authors"
	// EdgeMetadataDocumentTypes holds the string denoting the metadata_document_types edge name in mutations.
	EdgeMetadataDocumentTypes = "metadata_document_types"
	// EdgeDocument holds the string denoting the document edge name in mutations.
	EdgeDocument = "document"
	// Table holds the table name of the metadata in the database.
	Table = "metadata"
	// MetadataToolsTable is the table that holds the metadata_tools relation/edge.
	MetadataToolsTable = "tools"
	// MetadataToolsInverseTable is the table name for the Tool entity.
	// It exists in this package in order to avoid circular dependency with the "tool" package.
	MetadataToolsInverseTable = "tools"
	// MetadataToolsColumn is the table column denoting the metadata_tools relation/edge.
	MetadataToolsColumn = "metadata_metadata_tools"
	// MetadataAuthorsTable is the table that holds the metadata_authors relation/edge.
	MetadataAuthorsTable = "persons"
	// MetadataAuthorsInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	MetadataAuthorsInverseTable = "persons"
	// MetadataAuthorsColumn is the table column denoting the metadata_authors relation/edge.
	MetadataAuthorsColumn = "metadata_metadata_authors"
	// MetadataDocumentTypesTable is the table that holds the metadata_document_types relation/edge.
	MetadataDocumentTypesTable = "document_types"
	// MetadataDocumentTypesInverseTable is the table name for the DocumentType entity.
	// It exists in this package in order to avoid circular dependency with the "documenttype" package.
	MetadataDocumentTypesInverseTable = "document_types"
	// MetadataDocumentTypesColumn is the table column denoting the metadata_document_types relation/edge.
	MetadataDocumentTypesColumn = "metadata_metadata_document_types"
	// DocumentTable is the table that holds the document relation/edge.
	DocumentTable = "documents"
	// DocumentInverseTable is the table name for the Document entity.
	// It exists in this package in order to avoid circular dependency with the "document" package.
	DocumentInverseTable = "documents"
	// DocumentColumn is the table column denoting the document relation/edge.
	DocumentColumn = "metadata_document"
)

// Columns holds all SQL columns for metadata fields.
var Columns = []string{
	FieldID,
	FieldVersion,
	FieldName,
	FieldDate,
	FieldComment,
	FieldTools,
	FieldAuthors,
	FieldDocumentTypes,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Metadata queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// ByMetadataToolsCount orders the results by metadata_tools count.
func ByMetadataToolsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMetadataToolsStep(), opts...)
	}
}

// ByMetadataTools orders the results by metadata_tools terms.
func ByMetadataTools(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMetadataToolsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMetadataAuthorsCount orders the results by metadata_authors count.
func ByMetadataAuthorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMetadataAuthorsStep(), opts...)
	}
}

// ByMetadataAuthors orders the results by metadata_authors terms.
func ByMetadataAuthors(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMetadataAuthorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMetadataDocumentTypesCount orders the results by metadata_document_types count.
func ByMetadataDocumentTypesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMetadataDocumentTypesStep(), opts...)
	}
}

// ByMetadataDocumentTypes orders the results by metadata_document_types terms.
func ByMetadataDocumentTypes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMetadataDocumentTypesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByDocumentField orders the results by document field.
func ByDocumentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDocumentStep(), sql.OrderByField(field, opts...))
	}
}
func newMetadataToolsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MetadataToolsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MetadataToolsTable, MetadataToolsColumn),
	)
}
func newMetadataAuthorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MetadataAuthorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MetadataAuthorsTable, MetadataAuthorsColumn),
	)
}
func newMetadataDocumentTypesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MetadataDocumentTypesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MetadataDocumentTypesTable, MetadataDocumentTypesColumn),
	)
}
func newDocumentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DocumentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, DocumentTable, DocumentColumn),
	)
}
