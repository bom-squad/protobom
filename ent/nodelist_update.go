// Code generated by ent, DO NOT EDIT.
// ------------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// ------------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------
package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/bom-squad/protobom/ent/document"
	"github.com/bom-squad/protobom/ent/node"
	"github.com/bom-squad/protobom/ent/nodelist"
	"github.com/bom-squad/protobom/ent/predicate"
	"github.com/bom-squad/protobom/pkg/sbom"
)

// NodeListUpdate is the builder for updating NodeList entities.
type NodeListUpdate struct {
	config
	hooks    []Hook
	mutation *NodeListMutation
}

// Where appends a list predicates to the NodeListUpdate builder.
func (nlu *NodeListUpdate) Where(ps ...predicate.NodeList) *NodeListUpdate {
	nlu.mutation.Where(ps...)
	return nlu
}

// SetRootElements sets the "root_elements" field.
func (nlu *NodeListUpdate) SetRootElements(s []string) *NodeListUpdate {
	nlu.mutation.SetRootElements(s)
	return nlu
}

// AppendRootElements appends s to the "root_elements" field.
func (nlu *NodeListUpdate) AppendRootElements(s []string) *NodeListUpdate {
	nlu.mutation.AppendRootElements(s)
	return nlu
}

// SetNodes sets the "nodes" field.
func (nlu *NodeListUpdate) SetNodes(s []*sbom.Node) *NodeListUpdate {
	nlu.mutation.SetNodes(s)
	return nlu
}

// AppendNodes appends s to the "nodes" field.
func (nlu *NodeListUpdate) AppendNodes(s []*sbom.Node) *NodeListUpdate {
	nlu.mutation.AppendNodes(s)
	return nlu
}

// AddNodeListNodeIDs adds the "node_list_nodes" edge to the Node entity by IDs.
func (nlu *NodeListUpdate) AddNodeListNodeIDs(ids ...string) *NodeListUpdate {
	nlu.mutation.AddNodeListNodeIDs(ids...)
	return nlu
}

// AddNodeListNodes adds the "node_list_nodes" edges to the Node entity.
func (nlu *NodeListUpdate) AddNodeListNodes(n ...*Node) *NodeListUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nlu.AddNodeListNodeIDs(ids...)
}

// SetDocumentID sets the "document" edge to the Document entity by ID.
func (nlu *NodeListUpdate) SetDocumentID(id int) *NodeListUpdate {
	nlu.mutation.SetDocumentID(id)
	return nlu
}

// SetNillableDocumentID sets the "document" edge to the Document entity by ID if the given value is not nil.
func (nlu *NodeListUpdate) SetNillableDocumentID(id *int) *NodeListUpdate {
	if id != nil {
		nlu = nlu.SetDocumentID(*id)
	}
	return nlu
}

// SetDocument sets the "document" edge to the Document entity.
func (nlu *NodeListUpdate) SetDocument(d *Document) *NodeListUpdate {
	return nlu.SetDocumentID(d.ID)
}

// Mutation returns the NodeListMutation object of the builder.
func (nlu *NodeListUpdate) Mutation() *NodeListMutation {
	return nlu.mutation
}

// ClearNodeListNodes clears all "node_list_nodes" edges to the Node entity.
func (nlu *NodeListUpdate) ClearNodeListNodes() *NodeListUpdate {
	nlu.mutation.ClearNodeListNodes()
	return nlu
}

// RemoveNodeListNodeIDs removes the "node_list_nodes" edge to Node entities by IDs.
func (nlu *NodeListUpdate) RemoveNodeListNodeIDs(ids ...string) *NodeListUpdate {
	nlu.mutation.RemoveNodeListNodeIDs(ids...)
	return nlu
}

// RemoveNodeListNodes removes "node_list_nodes" edges to Node entities.
func (nlu *NodeListUpdate) RemoveNodeListNodes(n ...*Node) *NodeListUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nlu.RemoveNodeListNodeIDs(ids...)
}

// ClearDocument clears the "document" edge to the Document entity.
func (nlu *NodeListUpdate) ClearDocument() *NodeListUpdate {
	nlu.mutation.ClearDocument()
	return nlu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nlu *NodeListUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nlu.sqlSave, nlu.mutation, nlu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nlu *NodeListUpdate) SaveX(ctx context.Context) int {
	affected, err := nlu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nlu *NodeListUpdate) Exec(ctx context.Context) error {
	_, err := nlu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nlu *NodeListUpdate) ExecX(ctx context.Context) {
	if err := nlu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nlu *NodeListUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(nodelist.Table, nodelist.Columns, sqlgraph.NewFieldSpec(nodelist.FieldID, field.TypeInt))
	if ps := nlu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nlu.mutation.RootElements(); ok {
		_spec.SetField(nodelist.FieldRootElements, field.TypeJSON, value)
	}
	if value, ok := nlu.mutation.AppendedRootElements(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, nodelist.FieldRootElements, value)
		})
	}
	if value, ok := nlu.mutation.Nodes(); ok {
		_spec.SetField(nodelist.FieldNodes, field.TypeJSON, value)
	}
	if value, ok := nlu.mutation.AppendedNodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, nodelist.FieldNodes, value)
		})
	}
	if nlu.mutation.NodeListNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nodelist.NodeListNodesTable,
			Columns: []string{nodelist.NodeListNodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nlu.mutation.RemovedNodeListNodesIDs(); len(nodes) > 0 && !nlu.mutation.NodeListNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nodelist.NodeListNodesTable,
			Columns: []string{nodelist.NodeListNodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nlu.mutation.NodeListNodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nodelist.NodeListNodesTable,
			Columns: []string{nodelist.NodeListNodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nlu.mutation.DocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   nodelist.DocumentTable,
			Columns: []string{nodelist.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nlu.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   nodelist.DocumentTable,
			Columns: []string{nodelist.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nlu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nodelist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nlu.mutation.done = true
	return n, nil
}

// NodeListUpdateOne is the builder for updating a single NodeList entity.
type NodeListUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NodeListMutation
}

// SetRootElements sets the "root_elements" field.
func (nluo *NodeListUpdateOne) SetRootElements(s []string) *NodeListUpdateOne {
	nluo.mutation.SetRootElements(s)
	return nluo
}

// AppendRootElements appends s to the "root_elements" field.
func (nluo *NodeListUpdateOne) AppendRootElements(s []string) *NodeListUpdateOne {
	nluo.mutation.AppendRootElements(s)
	return nluo
}

// SetNodes sets the "nodes" field.
func (nluo *NodeListUpdateOne) SetNodes(s []*sbom.Node) *NodeListUpdateOne {
	nluo.mutation.SetNodes(s)
	return nluo
}

// AppendNodes appends s to the "nodes" field.
func (nluo *NodeListUpdateOne) AppendNodes(s []*sbom.Node) *NodeListUpdateOne {
	nluo.mutation.AppendNodes(s)
	return nluo
}

// AddNodeListNodeIDs adds the "node_list_nodes" edge to the Node entity by IDs.
func (nluo *NodeListUpdateOne) AddNodeListNodeIDs(ids ...string) *NodeListUpdateOne {
	nluo.mutation.AddNodeListNodeIDs(ids...)
	return nluo
}

// AddNodeListNodes adds the "node_list_nodes" edges to the Node entity.
func (nluo *NodeListUpdateOne) AddNodeListNodes(n ...*Node) *NodeListUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nluo.AddNodeListNodeIDs(ids...)
}

// SetDocumentID sets the "document" edge to the Document entity by ID.
func (nluo *NodeListUpdateOne) SetDocumentID(id int) *NodeListUpdateOne {
	nluo.mutation.SetDocumentID(id)
	return nluo
}

// SetNillableDocumentID sets the "document" edge to the Document entity by ID if the given value is not nil.
func (nluo *NodeListUpdateOne) SetNillableDocumentID(id *int) *NodeListUpdateOne {
	if id != nil {
		nluo = nluo.SetDocumentID(*id)
	}
	return nluo
}

// SetDocument sets the "document" edge to the Document entity.
func (nluo *NodeListUpdateOne) SetDocument(d *Document) *NodeListUpdateOne {
	return nluo.SetDocumentID(d.ID)
}

// Mutation returns the NodeListMutation object of the builder.
func (nluo *NodeListUpdateOne) Mutation() *NodeListMutation {
	return nluo.mutation
}

// ClearNodeListNodes clears all "node_list_nodes" edges to the Node entity.
func (nluo *NodeListUpdateOne) ClearNodeListNodes() *NodeListUpdateOne {
	nluo.mutation.ClearNodeListNodes()
	return nluo
}

// RemoveNodeListNodeIDs removes the "node_list_nodes" edge to Node entities by IDs.
func (nluo *NodeListUpdateOne) RemoveNodeListNodeIDs(ids ...string) *NodeListUpdateOne {
	nluo.mutation.RemoveNodeListNodeIDs(ids...)
	return nluo
}

// RemoveNodeListNodes removes "node_list_nodes" edges to Node entities.
func (nluo *NodeListUpdateOne) RemoveNodeListNodes(n ...*Node) *NodeListUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nluo.RemoveNodeListNodeIDs(ids...)
}

// ClearDocument clears the "document" edge to the Document entity.
func (nluo *NodeListUpdateOne) ClearDocument() *NodeListUpdateOne {
	nluo.mutation.ClearDocument()
	return nluo
}

// Where appends a list predicates to the NodeListUpdate builder.
func (nluo *NodeListUpdateOne) Where(ps ...predicate.NodeList) *NodeListUpdateOne {
	nluo.mutation.Where(ps...)
	return nluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nluo *NodeListUpdateOne) Select(field string, fields ...string) *NodeListUpdateOne {
	nluo.fields = append([]string{field}, fields...)
	return nluo
}

// Save executes the query and returns the updated NodeList entity.
func (nluo *NodeListUpdateOne) Save(ctx context.Context) (*NodeList, error) {
	return withHooks(ctx, nluo.sqlSave, nluo.mutation, nluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nluo *NodeListUpdateOne) SaveX(ctx context.Context) *NodeList {
	node, err := nluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nluo *NodeListUpdateOne) Exec(ctx context.Context) error {
	_, err := nluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nluo *NodeListUpdateOne) ExecX(ctx context.Context) {
	if err := nluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (nluo *NodeListUpdateOne) sqlSave(ctx context.Context) (_node *NodeList, err error) {
	_spec := sqlgraph.NewUpdateSpec(nodelist.Table, nodelist.Columns, sqlgraph.NewFieldSpec(nodelist.FieldID, field.TypeInt))
	id, ok := nluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NodeList.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nodelist.FieldID)
		for _, f := range fields {
			if !nodelist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != nodelist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nluo.mutation.RootElements(); ok {
		_spec.SetField(nodelist.FieldRootElements, field.TypeJSON, value)
	}
	if value, ok := nluo.mutation.AppendedRootElements(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, nodelist.FieldRootElements, value)
		})
	}
	if value, ok := nluo.mutation.Nodes(); ok {
		_spec.SetField(nodelist.FieldNodes, field.TypeJSON, value)
	}
	if value, ok := nluo.mutation.AppendedNodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, nodelist.FieldNodes, value)
		})
	}
	if nluo.mutation.NodeListNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nodelist.NodeListNodesTable,
			Columns: []string{nodelist.NodeListNodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nluo.mutation.RemovedNodeListNodesIDs(); len(nodes) > 0 && !nluo.mutation.NodeListNodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nodelist.NodeListNodesTable,
			Columns: []string{nodelist.NodeListNodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nluo.mutation.NodeListNodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   nodelist.NodeListNodesTable,
			Columns: []string{nodelist.NodeListNodesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nluo.mutation.DocumentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   nodelist.DocumentTable,
			Columns: []string{nodelist.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nluo.mutation.DocumentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   nodelist.DocumentTable,
			Columns: []string{nodelist.DocumentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(document.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &NodeList{config: nluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nodelist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nluo.mutation.done = true
	return _node, nil
}
