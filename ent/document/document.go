// Code generated by ent, DO NOT EDIT.
// ------------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// ------------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------

package document

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the document type in the database.
	Label = "document"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMetadata holds the string denoting the metadata field in the database.
	FieldMetadata = "metadata"
	// FieldNodeList holds the string denoting the node_list field in the database.
	FieldNodeList = "node_list"
	// EdgeDocumentMetadata holds the string denoting the document_metadata edge name in mutations.
	EdgeDocumentMetadata = "document_metadata"
	// EdgeDocumentNodeList holds the string denoting the document_node_list edge name in mutations.
	EdgeDocumentNodeList = "document_node_list"
	// Table holds the table name of the document in the database.
	Table = "documents"
	// DocumentMetadataTable is the table that holds the document_metadata relation/edge.
	DocumentMetadataTable = "documents"
	// DocumentMetadataInverseTable is the table name for the Metadata entity.
	// It exists in this package in order to avoid circular dependency with the "metadata" package.
	DocumentMetadataInverseTable = "metadata"
	// DocumentMetadataColumn is the table column denoting the document_metadata relation/edge.
	DocumentMetadataColumn = "metadata_document"
	// DocumentNodeListTable is the table that holds the document_node_list relation/edge.
	DocumentNodeListTable = "documents"
	// DocumentNodeListInverseTable is the table name for the NodeList entity.
	// It exists in this package in order to avoid circular dependency with the "nodelist" package.
	DocumentNodeListInverseTable = "node_lists"
	// DocumentNodeListColumn is the table column denoting the document_node_list relation/edge.
	DocumentNodeListColumn = "node_list_document"
)

// Columns holds all SQL columns for document fields.
var Columns = []string{
	FieldID,
	FieldMetadata,
	FieldNodeList,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "documents"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"metadata_document",
	"node_list_document",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Document queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDocumentMetadataField orders the results by document_metadata field.
func ByDocumentMetadataField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDocumentMetadataStep(), sql.OrderByField(field, opts...))
	}
}

// ByDocumentNodeListField orders the results by document_node_list field.
func ByDocumentNodeListField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDocumentNodeListStep(), sql.OrderByField(field, opts...))
	}
}
func newDocumentMetadataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DocumentMetadataInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, DocumentMetadataTable, DocumentMetadataColumn),
	)
}
func newDocumentNodeListStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DocumentNodeListInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, DocumentNodeListTable, DocumentNodeListColumn),
	)
}
