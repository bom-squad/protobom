// Code generated by ent, DO NOT EDIT.
// ------------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// ------------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------

package node

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the node type in the database.
	Label = "node"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldFileName holds the string denoting the file_name field in the database.
	FieldFileName = "file_name"
	// FieldURLHome holds the string denoting the url_home field in the database.
	FieldURLHome = "url_home"
	// FieldURLDownload holds the string denoting the url_download field in the database.
	FieldURLDownload = "url_download"
	// FieldLicenses holds the string denoting the licenses field in the database.
	FieldLicenses = "licenses"
	// FieldLicenseConcluded holds the string denoting the license_concluded field in the database.
	FieldLicenseConcluded = "license_concluded"
	// FieldLicenseComments holds the string denoting the license_comments field in the database.
	FieldLicenseComments = "license_comments"
	// FieldCopyright holds the string denoting the copyright field in the database.
	FieldCopyright = "copyright"
	// FieldSourceInfo holds the string denoting the source_info field in the database.
	FieldSourceInfo = "source_info"
	// FieldComment holds the string denoting the comment field in the database.
	FieldComment = "comment"
	// FieldSummary holds the string denoting the summary field in the database.
	FieldSummary = "summary"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldReleaseDate holds the string denoting the release_date field in the database.
	FieldReleaseDate = "release_date"
	// FieldBuildDate holds the string denoting the build_date field in the database.
	FieldBuildDate = "build_date"
	// FieldValidUntilDate holds the string denoting the valid_until_date field in the database.
	FieldValidUntilDate = "valid_until_date"
	// FieldAttribution holds the string denoting the attribution field in the database.
	FieldAttribution = "attribution"
	// FieldFileTypes holds the string denoting the file_types field in the database.
	FieldFileTypes = "file_types"
	// FieldSuppliers holds the string denoting the suppliers field in the database.
	FieldSuppliers = "suppliers"
	// FieldOriginators holds the string denoting the originators field in the database.
	FieldOriginators = "originators"
	// FieldExternalReferences holds the string denoting the external_references field in the database.
	FieldExternalReferences = "external_references"
	// FieldHashes holds the string denoting the hashes field in the database.
	FieldHashes = "hashes"
	// FieldIdentifiers holds the string denoting the identifiers field in the database.
	FieldIdentifiers = "identifiers"
	// FieldPrimaryPurpose holds the string denoting the primary_purpose field in the database.
	FieldPrimaryPurpose = "primary_purpose"
	// EdgeNodeSuppliers holds the string denoting the node_suppliers edge name in mutations.
	EdgeNodeSuppliers = "node_suppliers"
	// EdgeNodeOriginators holds the string denoting the node_originators edge name in mutations.
	EdgeNodeOriginators = "node_originators"
	// EdgeNodeExternalReferences holds the string denoting the node_external_references edge name in mutations.
	EdgeNodeExternalReferences = "node_external_references"
	// EdgeNodeIdentifiers holds the string denoting the node_identifiers edge name in mutations.
	EdgeNodeIdentifiers = "node_identifiers"
	// EdgeNodeHashes holds the string denoting the node_hashes edge name in mutations.
	EdgeNodeHashes = "node_hashes"
	// EdgeNodePrimaryPurpose holds the string denoting the node_primary_purpose edge name in mutations.
	EdgeNodePrimaryPurpose = "node_primary_purpose"
	// EdgeNodes holds the string denoting the nodes edge name in mutations.
	EdgeNodes = "nodes"
	// EdgeNodeList holds the string denoting the node_list edge name in mutations.
	EdgeNodeList = "node_list"
	// EdgeEdgeTypes holds the string denoting the edge_types edge name in mutations.
	EdgeEdgeTypes = "edge_types"
	// Table holds the table name of the node in the database.
	Table = "nodes"
	// NodeSuppliersTable is the table that holds the node_suppliers relation/edge.
	NodeSuppliersTable = "persons"
	// NodeSuppliersInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	NodeSuppliersInverseTable = "persons"
	// NodeSuppliersColumn is the table column denoting the node_suppliers relation/edge.
	NodeSuppliersColumn = "node_node_suppliers"
	// NodeOriginatorsTable is the table that holds the node_originators relation/edge.
	NodeOriginatorsTable = "persons"
	// NodeOriginatorsInverseTable is the table name for the Person entity.
	// It exists in this package in order to avoid circular dependency with the "person" package.
	NodeOriginatorsInverseTable = "persons"
	// NodeOriginatorsColumn is the table column denoting the node_originators relation/edge.
	NodeOriginatorsColumn = "node_node_originators"
	// NodeExternalReferencesTable is the table that holds the node_external_references relation/edge.
	NodeExternalReferencesTable = "external_references"
	// NodeExternalReferencesInverseTable is the table name for the ExternalReference entity.
	// It exists in this package in order to avoid circular dependency with the "externalreference" package.
	NodeExternalReferencesInverseTable = "external_references"
	// NodeExternalReferencesColumn is the table column denoting the node_external_references relation/edge.
	NodeExternalReferencesColumn = "node_node_external_references"
	// NodeIdentifiersTable is the table that holds the node_identifiers relation/edge.
	NodeIdentifiersTable = "identifiers_entries"
	// NodeIdentifiersInverseTable is the table name for the IdentifiersEntry entity.
	// It exists in this package in order to avoid circular dependency with the "identifiersentry" package.
	NodeIdentifiersInverseTable = "identifiers_entries"
	// NodeIdentifiersColumn is the table column denoting the node_identifiers relation/edge.
	NodeIdentifiersColumn = "node_node_identifiers"
	// NodeHashesTable is the table that holds the node_hashes relation/edge.
	NodeHashesTable = "hashes_entries"
	// NodeHashesInverseTable is the table name for the HashesEntry entity.
	// It exists in this package in order to avoid circular dependency with the "hashesentry" package.
	NodeHashesInverseTable = "hashes_entries"
	// NodeHashesColumn is the table column denoting the node_hashes relation/edge.
	NodeHashesColumn = "node_node_hashes"
	// NodePrimaryPurposeTable is the table that holds the node_primary_purpose relation/edge. The primary key declared below.
	NodePrimaryPurposeTable = "node_node_primary_purpose"
	// NodePrimaryPurposeInverseTable is the table name for the Purpose entity.
	// It exists in this package in order to avoid circular dependency with the "purpose" package.
	NodePrimaryPurposeInverseTable = "purposes"
	// NodesTable is the table that holds the nodes relation/edge. The primary key declared below.
	NodesTable = "edge_types"
	// NodeListTable is the table that holds the node_list relation/edge.
	NodeListTable = "nodes"
	// NodeListInverseTable is the table name for the NodeList entity.
	// It exists in this package in order to avoid circular dependency with the "nodelist" package.
	NodeListInverseTable = "node_lists"
	// NodeListColumn is the table column denoting the node_list relation/edge.
	NodeListColumn = "node_list_node_list_nodes"
	// EdgeTypesTable is the table that holds the edge_types relation/edge.
	EdgeTypesTable = "edge_types"
	// EdgeTypesInverseTable is the table name for the EdgeType entity.
	// It exists in this package in order to avoid circular dependency with the "edgetype" package.
	EdgeTypesInverseTable = "edge_types"
	// EdgeTypesColumn is the table column denoting the edge_types relation/edge.
	EdgeTypesColumn = "node_id"
)

// Columns holds all SQL columns for node fields.
var Columns = []string{
	FieldID,
	FieldType,
	FieldName,
	FieldVersion,
	FieldFileName,
	FieldURLHome,
	FieldURLDownload,
	FieldLicenses,
	FieldLicenseConcluded,
	FieldLicenseComments,
	FieldCopyright,
	FieldSourceInfo,
	FieldComment,
	FieldSummary,
	FieldDescription,
	FieldReleaseDate,
	FieldBuildDate,
	FieldValidUntilDate,
	FieldAttribution,
	FieldFileTypes,
	FieldSuppliers,
	FieldOriginators,
	FieldExternalReferences,
	FieldHashes,
	FieldIdentifiers,
	FieldPrimaryPurpose,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "nodes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"node_list_node_list_nodes",
}

var (
	// NodePrimaryPurposePrimaryKey and NodePrimaryPurposeColumn2 are the table columns denoting the
	// primary key for the node_primary_purpose relation (M2M).
	NodePrimaryPurposePrimaryKey = []string{"node_id", "purpose_id"}
	// NodesPrimaryKey and NodesColumn2 are the table columns denoting the
	// primary key for the nodes relation (M2M).
	NodesPrimaryKey = []string{"node_id", "node_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypePACKAGE Type = "PACKAGE"
	TypeFILE    Type = "FILE"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypePACKAGE, TypeFILE:
		return nil
	default:
		return fmt.Errorf("node: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Node queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByFileName orders the results by the file_name field.
func ByFileName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileName, opts...).ToFunc()
}

// ByURLHome orders the results by the url_home field.
func ByURLHome(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURLHome, opts...).ToFunc()
}

// ByURLDownload orders the results by the url_download field.
func ByURLDownload(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURLDownload, opts...).ToFunc()
}

// ByLicenseConcluded orders the results by the license_concluded field.
func ByLicenseConcluded(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicenseConcluded, opts...).ToFunc()
}

// ByLicenseComments orders the results by the license_comments field.
func ByLicenseComments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLicenseComments, opts...).ToFunc()
}

// ByCopyright orders the results by the copyright field.
func ByCopyright(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCopyright, opts...).ToFunc()
}

// BySourceInfo orders the results by the source_info field.
func BySourceInfo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSourceInfo, opts...).ToFunc()
}

// ByComment orders the results by the comment field.
func ByComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComment, opts...).ToFunc()
}

// BySummary orders the results by the summary field.
func BySummary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSummary, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByReleaseDate orders the results by the release_date field.
func ByReleaseDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReleaseDate, opts...).ToFunc()
}

// ByBuildDate orders the results by the build_date field.
func ByBuildDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBuildDate, opts...).ToFunc()
}

// ByValidUntilDate orders the results by the valid_until_date field.
func ByValidUntilDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldValidUntilDate, opts...).ToFunc()
}

// ByNodeSuppliersCount orders the results by node_suppliers count.
func ByNodeSuppliersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNodeSuppliersStep(), opts...)
	}
}

// ByNodeSuppliers orders the results by node_suppliers terms.
func ByNodeSuppliers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodeSuppliersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNodeOriginatorsCount orders the results by node_originators count.
func ByNodeOriginatorsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNodeOriginatorsStep(), opts...)
	}
}

// ByNodeOriginators orders the results by node_originators terms.
func ByNodeOriginators(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodeOriginatorsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNodeExternalReferencesCount orders the results by node_external_references count.
func ByNodeExternalReferencesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNodeExternalReferencesStep(), opts...)
	}
}

// ByNodeExternalReferences orders the results by node_external_references terms.
func ByNodeExternalReferences(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodeExternalReferencesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNodeIdentifiersCount orders the results by node_identifiers count.
func ByNodeIdentifiersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNodeIdentifiersStep(), opts...)
	}
}

// ByNodeIdentifiers orders the results by node_identifiers terms.
func ByNodeIdentifiers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodeIdentifiersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNodeHashesCount orders the results by node_hashes count.
func ByNodeHashesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNodeHashesStep(), opts...)
	}
}

// ByNodeHashes orders the results by node_hashes terms.
func ByNodeHashes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodeHashesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNodePrimaryPurposeCount orders the results by node_primary_purpose count.
func ByNodePrimaryPurposeCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNodePrimaryPurposeStep(), opts...)
	}
}

// ByNodePrimaryPurpose orders the results by node_primary_purpose terms.
func ByNodePrimaryPurpose(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodePrimaryPurposeStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNodesCount orders the results by nodes count.
func ByNodesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newNodesStep(), opts...)
	}
}

// ByNodes orders the results by nodes terms.
func ByNodes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByNodeListField orders the results by node_list field.
func ByNodeListField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNodeListStep(), sql.OrderByField(field, opts...))
	}
}

// ByEdgeTypesCount orders the results by edge_types count.
func ByEdgeTypesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEdgeTypesStep(), opts...)
	}
}

// ByEdgeTypes orders the results by edge_types terms.
func ByEdgeTypes(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEdgeTypesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newNodeSuppliersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NodeSuppliersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NodeSuppliersTable, NodeSuppliersColumn),
	)
}
func newNodeOriginatorsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NodeOriginatorsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NodeOriginatorsTable, NodeOriginatorsColumn),
	)
}
func newNodeExternalReferencesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NodeExternalReferencesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NodeExternalReferencesTable, NodeExternalReferencesColumn),
	)
}
func newNodeIdentifiersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NodeIdentifiersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NodeIdentifiersTable, NodeIdentifiersColumn),
	)
}
func newNodeHashesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NodeHashesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, NodeHashesTable, NodeHashesColumn),
	)
}
func newNodePrimaryPurposeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NodePrimaryPurposeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, NodePrimaryPurposeTable, NodePrimaryPurposePrimaryKey...),
	)
}
func newNodesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(Table, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, NodesTable, NodesPrimaryKey...),
	)
}
func newNodeListStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NodeListInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, NodeListTable, NodeListColumn),
	)
}
func newEdgeTypesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EdgeTypesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, EdgeTypesTable, EdgeTypesColumn),
	)
}
