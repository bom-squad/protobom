// Code generated by ent, DO NOT EDIT.
// ------------------------------------------------------------------------
// SPDX-FileCopyrightText: Copyright Â© 2024 The Protobom Authors
// SPDX-FileType: SOURCE
// SPDX-License-Identifier: Apache-2.0
// ------------------------------------------------------------------------
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// ------------------------------------------------------------------------
package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/bom-squad/protobom/ent/edgetype"
	"github.com/bom-squad/protobom/ent/externalreference"
	"github.com/bom-squad/protobom/ent/hashesentry"
	"github.com/bom-squad/protobom/ent/identifiersentry"
	"github.com/bom-squad/protobom/ent/node"
	"github.com/bom-squad/protobom/ent/nodelist"
	"github.com/bom-squad/protobom/ent/person"
	"github.com/bom-squad/protobom/ent/predicate"
	"github.com/bom-squad/protobom/ent/purpose"
	"github.com/bom-squad/protobom/pkg/sbom"
)

// NodeUpdate is the builder for updating Node entities.
type NodeUpdate struct {
	config
	hooks    []Hook
	mutation *NodeMutation
}

// Where appends a list predicates to the NodeUpdate builder.
func (nu *NodeUpdate) Where(ps ...predicate.Node) *NodeUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetType sets the "type" field.
func (nu *NodeUpdate) SetType(n node.Type) *NodeUpdate {
	nu.mutation.SetType(n)
	return nu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableType(n *node.Type) *NodeUpdate {
	if n != nil {
		nu.SetType(*n)
	}
	return nu
}

// SetName sets the "name" field.
func (nu *NodeUpdate) SetName(s string) *NodeUpdate {
	nu.mutation.SetName(s)
	return nu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableName(s *string) *NodeUpdate {
	if s != nil {
		nu.SetName(*s)
	}
	return nu
}

// SetVersion sets the "version" field.
func (nu *NodeUpdate) SetVersion(s string) *NodeUpdate {
	nu.mutation.SetVersion(s)
	return nu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableVersion(s *string) *NodeUpdate {
	if s != nil {
		nu.SetVersion(*s)
	}
	return nu
}

// SetFileName sets the "file_name" field.
func (nu *NodeUpdate) SetFileName(s string) *NodeUpdate {
	nu.mutation.SetFileName(s)
	return nu
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableFileName(s *string) *NodeUpdate {
	if s != nil {
		nu.SetFileName(*s)
	}
	return nu
}

// SetURLHome sets the "url_home" field.
func (nu *NodeUpdate) SetURLHome(s string) *NodeUpdate {
	nu.mutation.SetURLHome(s)
	return nu
}

// SetNillableURLHome sets the "url_home" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableURLHome(s *string) *NodeUpdate {
	if s != nil {
		nu.SetURLHome(*s)
	}
	return nu
}

// SetURLDownload sets the "url_download" field.
func (nu *NodeUpdate) SetURLDownload(s string) *NodeUpdate {
	nu.mutation.SetURLDownload(s)
	return nu
}

// SetNillableURLDownload sets the "url_download" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableURLDownload(s *string) *NodeUpdate {
	if s != nil {
		nu.SetURLDownload(*s)
	}
	return nu
}

// SetLicenses sets the "licenses" field.
func (nu *NodeUpdate) SetLicenses(s []string) *NodeUpdate {
	nu.mutation.SetLicenses(s)
	return nu
}

// AppendLicenses appends s to the "licenses" field.
func (nu *NodeUpdate) AppendLicenses(s []string) *NodeUpdate {
	nu.mutation.AppendLicenses(s)
	return nu
}

// SetLicenseConcluded sets the "license_concluded" field.
func (nu *NodeUpdate) SetLicenseConcluded(s string) *NodeUpdate {
	nu.mutation.SetLicenseConcluded(s)
	return nu
}

// SetNillableLicenseConcluded sets the "license_concluded" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableLicenseConcluded(s *string) *NodeUpdate {
	if s != nil {
		nu.SetLicenseConcluded(*s)
	}
	return nu
}

// SetLicenseComments sets the "license_comments" field.
func (nu *NodeUpdate) SetLicenseComments(s string) *NodeUpdate {
	nu.mutation.SetLicenseComments(s)
	return nu
}

// SetNillableLicenseComments sets the "license_comments" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableLicenseComments(s *string) *NodeUpdate {
	if s != nil {
		nu.SetLicenseComments(*s)
	}
	return nu
}

// SetCopyright sets the "copyright" field.
func (nu *NodeUpdate) SetCopyright(s string) *NodeUpdate {
	nu.mutation.SetCopyright(s)
	return nu
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableCopyright(s *string) *NodeUpdate {
	if s != nil {
		nu.SetCopyright(*s)
	}
	return nu
}

// SetSourceInfo sets the "source_info" field.
func (nu *NodeUpdate) SetSourceInfo(s string) *NodeUpdate {
	nu.mutation.SetSourceInfo(s)
	return nu
}

// SetNillableSourceInfo sets the "source_info" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableSourceInfo(s *string) *NodeUpdate {
	if s != nil {
		nu.SetSourceInfo(*s)
	}
	return nu
}

// SetComment sets the "comment" field.
func (nu *NodeUpdate) SetComment(s string) *NodeUpdate {
	nu.mutation.SetComment(s)
	return nu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableComment(s *string) *NodeUpdate {
	if s != nil {
		nu.SetComment(*s)
	}
	return nu
}

// SetSummary sets the "summary" field.
func (nu *NodeUpdate) SetSummary(s string) *NodeUpdate {
	nu.mutation.SetSummary(s)
	return nu
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableSummary(s *string) *NodeUpdate {
	if s != nil {
		nu.SetSummary(*s)
	}
	return nu
}

// SetDescription sets the "description" field.
func (nu *NodeUpdate) SetDescription(s string) *NodeUpdate {
	nu.mutation.SetDescription(s)
	return nu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableDescription(s *string) *NodeUpdate {
	if s != nil {
		nu.SetDescription(*s)
	}
	return nu
}

// SetReleaseDate sets the "release_date" field.
func (nu *NodeUpdate) SetReleaseDate(t time.Time) *NodeUpdate {
	nu.mutation.SetReleaseDate(t)
	return nu
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableReleaseDate(t *time.Time) *NodeUpdate {
	if t != nil {
		nu.SetReleaseDate(*t)
	}
	return nu
}

// SetBuildDate sets the "build_date" field.
func (nu *NodeUpdate) SetBuildDate(t time.Time) *NodeUpdate {
	nu.mutation.SetBuildDate(t)
	return nu
}

// SetNillableBuildDate sets the "build_date" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableBuildDate(t *time.Time) *NodeUpdate {
	if t != nil {
		nu.SetBuildDate(*t)
	}
	return nu
}

// SetValidUntilDate sets the "valid_until_date" field.
func (nu *NodeUpdate) SetValidUntilDate(t time.Time) *NodeUpdate {
	nu.mutation.SetValidUntilDate(t)
	return nu
}

// SetNillableValidUntilDate sets the "valid_until_date" field if the given value is not nil.
func (nu *NodeUpdate) SetNillableValidUntilDate(t *time.Time) *NodeUpdate {
	if t != nil {
		nu.SetValidUntilDate(*t)
	}
	return nu
}

// SetAttribution sets the "attribution" field.
func (nu *NodeUpdate) SetAttribution(s []string) *NodeUpdate {
	nu.mutation.SetAttribution(s)
	return nu
}

// AppendAttribution appends s to the "attribution" field.
func (nu *NodeUpdate) AppendAttribution(s []string) *NodeUpdate {
	nu.mutation.AppendAttribution(s)
	return nu
}

// SetFileTypes sets the "file_types" field.
func (nu *NodeUpdate) SetFileTypes(s []string) *NodeUpdate {
	nu.mutation.SetFileTypes(s)
	return nu
}

// AppendFileTypes appends s to the "file_types" field.
func (nu *NodeUpdate) AppendFileTypes(s []string) *NodeUpdate {
	nu.mutation.AppendFileTypes(s)
	return nu
}

// SetSuppliers sets the "suppliers" field.
func (nu *NodeUpdate) SetSuppliers(s []*sbom.Person) *NodeUpdate {
	nu.mutation.SetSuppliers(s)
	return nu
}

// AppendSuppliers appends s to the "suppliers" field.
func (nu *NodeUpdate) AppendSuppliers(s []*sbom.Person) *NodeUpdate {
	nu.mutation.AppendSuppliers(s)
	return nu
}

// SetOriginators sets the "originators" field.
func (nu *NodeUpdate) SetOriginators(s []*sbom.Person) *NodeUpdate {
	nu.mutation.SetOriginators(s)
	return nu
}

// AppendOriginators appends s to the "originators" field.
func (nu *NodeUpdate) AppendOriginators(s []*sbom.Person) *NodeUpdate {
	nu.mutation.AppendOriginators(s)
	return nu
}

// SetExternalReferences sets the "external_references" field.
func (nu *NodeUpdate) SetExternalReferences(sr []*sbom.ExternalReference) *NodeUpdate {
	nu.mutation.SetExternalReferences(sr)
	return nu
}

// AppendExternalReferences appends sr to the "external_references" field.
func (nu *NodeUpdate) AppendExternalReferences(sr []*sbom.ExternalReference) *NodeUpdate {
	nu.mutation.AppendExternalReferences(sr)
	return nu
}

// SetHashes sets the "hashes" field.
func (nu *NodeUpdate) SetHashes(m map[int32]string) *NodeUpdate {
	nu.mutation.SetHashes(m)
	return nu
}

// SetIdentifiers sets the "identifiers" field.
func (nu *NodeUpdate) SetIdentifiers(m map[int32]string) *NodeUpdate {
	nu.mutation.SetIdentifiers(m)
	return nu
}

// SetPrimaryPurpose sets the "primary_purpose" field.
func (nu *NodeUpdate) SetPrimaryPurpose(s []sbom.Purpose) *NodeUpdate {
	nu.mutation.SetPrimaryPurpose(s)
	return nu
}

// AppendPrimaryPurpose appends s to the "primary_purpose" field.
func (nu *NodeUpdate) AppendPrimaryPurpose(s []sbom.Purpose) *NodeUpdate {
	nu.mutation.AppendPrimaryPurpose(s)
	return nu
}

// AddNodeSupplierIDs adds the "node_suppliers" edge to the Person entity by IDs.
func (nu *NodeUpdate) AddNodeSupplierIDs(ids ...int) *NodeUpdate {
	nu.mutation.AddNodeSupplierIDs(ids...)
	return nu
}

// AddNodeSuppliers adds the "node_suppliers" edges to the Person entity.
func (nu *NodeUpdate) AddNodeSuppliers(p ...*Person) *NodeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.AddNodeSupplierIDs(ids...)
}

// AddNodeOriginatorIDs adds the "node_originators" edge to the Person entity by IDs.
func (nu *NodeUpdate) AddNodeOriginatorIDs(ids ...int) *NodeUpdate {
	nu.mutation.AddNodeOriginatorIDs(ids...)
	return nu
}

// AddNodeOriginators adds the "node_originators" edges to the Person entity.
func (nu *NodeUpdate) AddNodeOriginators(p ...*Person) *NodeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.AddNodeOriginatorIDs(ids...)
}

// AddNodeExternalReferenceIDs adds the "node_external_references" edge to the ExternalReference entity by IDs.
func (nu *NodeUpdate) AddNodeExternalReferenceIDs(ids ...int) *NodeUpdate {
	nu.mutation.AddNodeExternalReferenceIDs(ids...)
	return nu
}

// AddNodeExternalReferences adds the "node_external_references" edges to the ExternalReference entity.
func (nu *NodeUpdate) AddNodeExternalReferences(e ...*ExternalReference) *NodeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nu.AddNodeExternalReferenceIDs(ids...)
}

// AddNodeIdentifierIDs adds the "node_identifiers" edge to the IdentifiersEntry entity by IDs.
func (nu *NodeUpdate) AddNodeIdentifierIDs(ids ...int) *NodeUpdate {
	nu.mutation.AddNodeIdentifierIDs(ids...)
	return nu
}

// AddNodeIdentifiers adds the "node_identifiers" edges to the IdentifiersEntry entity.
func (nu *NodeUpdate) AddNodeIdentifiers(i ...*IdentifiersEntry) *NodeUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nu.AddNodeIdentifierIDs(ids...)
}

// AddNodeHashIDs adds the "node_hashes" edge to the HashesEntry entity by IDs.
func (nu *NodeUpdate) AddNodeHashIDs(ids ...int) *NodeUpdate {
	nu.mutation.AddNodeHashIDs(ids...)
	return nu
}

// AddNodeHashes adds the "node_hashes" edges to the HashesEntry entity.
func (nu *NodeUpdate) AddNodeHashes(h ...*HashesEntry) *NodeUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return nu.AddNodeHashIDs(ids...)
}

// AddNodePrimaryPurposeIDs adds the "node_primary_purpose" edge to the Purpose entity by IDs.
func (nu *NodeUpdate) AddNodePrimaryPurposeIDs(ids ...int) *NodeUpdate {
	nu.mutation.AddNodePrimaryPurposeIDs(ids...)
	return nu
}

// AddNodePrimaryPurpose adds the "node_primary_purpose" edges to the Purpose entity.
func (nu *NodeUpdate) AddNodePrimaryPurpose(p ...*Purpose) *NodeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.AddNodePrimaryPurposeIDs(ids...)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (nu *NodeUpdate) AddNodeIDs(ids ...string) *NodeUpdate {
	nu.mutation.AddNodeIDs(ids...)
	return nu
}

// AddNodes adds the "nodes" edges to the Node entity.
func (nu *NodeUpdate) AddNodes(n ...*Node) *NodeUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.AddNodeIDs(ids...)
}

// SetNodeListID sets the "node_list" edge to the NodeList entity by ID.
func (nu *NodeUpdate) SetNodeListID(id int) *NodeUpdate {
	nu.mutation.SetNodeListID(id)
	return nu
}

// SetNodeList sets the "node_list" edge to the NodeList entity.
func (nu *NodeUpdate) SetNodeList(n *NodeList) *NodeUpdate {
	return nu.SetNodeListID(n.ID)
}

// AddEdgeTypeIDs adds the "edge_types" edge to the EdgeType entity by IDs.
func (nu *NodeUpdate) AddEdgeTypeIDs(ids ...int) *NodeUpdate {
	nu.mutation.AddEdgeTypeIDs(ids...)
	return nu
}

// AddEdgeTypes adds the "edge_types" edges to the EdgeType entity.
func (nu *NodeUpdate) AddEdgeTypes(e ...*EdgeType) *NodeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nu.AddEdgeTypeIDs(ids...)
}

// Mutation returns the NodeMutation object of the builder.
func (nu *NodeUpdate) Mutation() *NodeMutation {
	return nu.mutation
}

// ClearNodeSuppliers clears all "node_suppliers" edges to the Person entity.
func (nu *NodeUpdate) ClearNodeSuppliers() *NodeUpdate {
	nu.mutation.ClearNodeSuppliers()
	return nu
}

// RemoveNodeSupplierIDs removes the "node_suppliers" edge to Person entities by IDs.
func (nu *NodeUpdate) RemoveNodeSupplierIDs(ids ...int) *NodeUpdate {
	nu.mutation.RemoveNodeSupplierIDs(ids...)
	return nu
}

// RemoveNodeSuppliers removes "node_suppliers" edges to Person entities.
func (nu *NodeUpdate) RemoveNodeSuppliers(p ...*Person) *NodeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.RemoveNodeSupplierIDs(ids...)
}

// ClearNodeOriginators clears all "node_originators" edges to the Person entity.
func (nu *NodeUpdate) ClearNodeOriginators() *NodeUpdate {
	nu.mutation.ClearNodeOriginators()
	return nu
}

// RemoveNodeOriginatorIDs removes the "node_originators" edge to Person entities by IDs.
func (nu *NodeUpdate) RemoveNodeOriginatorIDs(ids ...int) *NodeUpdate {
	nu.mutation.RemoveNodeOriginatorIDs(ids...)
	return nu
}

// RemoveNodeOriginators removes "node_originators" edges to Person entities.
func (nu *NodeUpdate) RemoveNodeOriginators(p ...*Person) *NodeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.RemoveNodeOriginatorIDs(ids...)
}

// ClearNodeExternalReferences clears all "node_external_references" edges to the ExternalReference entity.
func (nu *NodeUpdate) ClearNodeExternalReferences() *NodeUpdate {
	nu.mutation.ClearNodeExternalReferences()
	return nu
}

// RemoveNodeExternalReferenceIDs removes the "node_external_references" edge to ExternalReference entities by IDs.
func (nu *NodeUpdate) RemoveNodeExternalReferenceIDs(ids ...int) *NodeUpdate {
	nu.mutation.RemoveNodeExternalReferenceIDs(ids...)
	return nu
}

// RemoveNodeExternalReferences removes "node_external_references" edges to ExternalReference entities.
func (nu *NodeUpdate) RemoveNodeExternalReferences(e ...*ExternalReference) *NodeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nu.RemoveNodeExternalReferenceIDs(ids...)
}

// ClearNodeIdentifiers clears all "node_identifiers" edges to the IdentifiersEntry entity.
func (nu *NodeUpdate) ClearNodeIdentifiers() *NodeUpdate {
	nu.mutation.ClearNodeIdentifiers()
	return nu
}

// RemoveNodeIdentifierIDs removes the "node_identifiers" edge to IdentifiersEntry entities by IDs.
func (nu *NodeUpdate) RemoveNodeIdentifierIDs(ids ...int) *NodeUpdate {
	nu.mutation.RemoveNodeIdentifierIDs(ids...)
	return nu
}

// RemoveNodeIdentifiers removes "node_identifiers" edges to IdentifiersEntry entities.
func (nu *NodeUpdate) RemoveNodeIdentifiers(i ...*IdentifiersEntry) *NodeUpdate {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nu.RemoveNodeIdentifierIDs(ids...)
}

// ClearNodeHashes clears all "node_hashes" edges to the HashesEntry entity.
func (nu *NodeUpdate) ClearNodeHashes() *NodeUpdate {
	nu.mutation.ClearNodeHashes()
	return nu
}

// RemoveNodeHashIDs removes the "node_hashes" edge to HashesEntry entities by IDs.
func (nu *NodeUpdate) RemoveNodeHashIDs(ids ...int) *NodeUpdate {
	nu.mutation.RemoveNodeHashIDs(ids...)
	return nu
}

// RemoveNodeHashes removes "node_hashes" edges to HashesEntry entities.
func (nu *NodeUpdate) RemoveNodeHashes(h ...*HashesEntry) *NodeUpdate {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return nu.RemoveNodeHashIDs(ids...)
}

// ClearNodePrimaryPurpose clears all "node_primary_purpose" edges to the Purpose entity.
func (nu *NodeUpdate) ClearNodePrimaryPurpose() *NodeUpdate {
	nu.mutation.ClearNodePrimaryPurpose()
	return nu
}

// RemoveNodePrimaryPurposeIDs removes the "node_primary_purpose" edge to Purpose entities by IDs.
func (nu *NodeUpdate) RemoveNodePrimaryPurposeIDs(ids ...int) *NodeUpdate {
	nu.mutation.RemoveNodePrimaryPurposeIDs(ids...)
	return nu
}

// RemoveNodePrimaryPurpose removes "node_primary_purpose" edges to Purpose entities.
func (nu *NodeUpdate) RemoveNodePrimaryPurpose(p ...*Purpose) *NodeUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nu.RemoveNodePrimaryPurposeIDs(ids...)
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (nu *NodeUpdate) ClearNodes() *NodeUpdate {
	nu.mutation.ClearNodes()
	return nu
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (nu *NodeUpdate) RemoveNodeIDs(ids ...string) *NodeUpdate {
	nu.mutation.RemoveNodeIDs(ids...)
	return nu
}

// RemoveNodes removes "nodes" edges to Node entities.
func (nu *NodeUpdate) RemoveNodes(n ...*Node) *NodeUpdate {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nu.RemoveNodeIDs(ids...)
}

// ClearNodeList clears the "node_list" edge to the NodeList entity.
func (nu *NodeUpdate) ClearNodeList() *NodeUpdate {
	nu.mutation.ClearNodeList()
	return nu
}

// ClearEdgeTypes clears all "edge_types" edges to the EdgeType entity.
func (nu *NodeUpdate) ClearEdgeTypes() *NodeUpdate {
	nu.mutation.ClearEdgeTypes()
	return nu
}

// RemoveEdgeTypeIDs removes the "edge_types" edge to EdgeType entities by IDs.
func (nu *NodeUpdate) RemoveEdgeTypeIDs(ids ...int) *NodeUpdate {
	nu.mutation.RemoveEdgeTypeIDs(ids...)
	return nu
}

// RemoveEdgeTypes removes "edge_types" edges to EdgeType entities.
func (nu *NodeUpdate) RemoveEdgeTypes(e ...*EdgeType) *NodeUpdate {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nu.RemoveEdgeTypeIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NodeUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, nu.sqlSave, nu.mutation, nu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NodeUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NodeUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NodeUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NodeUpdate) check() error {
	if v, ok := nu.mutation.GetType(); ok {
		if err := node.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Node.type": %w`, err)}
		}
	}
	if _, ok := nu.mutation.NodeListID(); nu.mutation.NodeListCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Node.node_list"`)
	}
	return nil
}

func (nu *NodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := nu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(node.Table, node.Columns, sqlgraph.NewFieldSpec(node.FieldID, field.TypeString))
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.GetType(); ok {
		_spec.SetField(node.FieldType, field.TypeEnum, value)
	}
	if value, ok := nu.mutation.Name(); ok {
		_spec.SetField(node.FieldName, field.TypeString, value)
	}
	if value, ok := nu.mutation.Version(); ok {
		_spec.SetField(node.FieldVersion, field.TypeString, value)
	}
	if value, ok := nu.mutation.FileName(); ok {
		_spec.SetField(node.FieldFileName, field.TypeString, value)
	}
	if value, ok := nu.mutation.URLHome(); ok {
		_spec.SetField(node.FieldURLHome, field.TypeString, value)
	}
	if value, ok := nu.mutation.URLDownload(); ok {
		_spec.SetField(node.FieldURLDownload, field.TypeString, value)
	}
	if value, ok := nu.mutation.Licenses(); ok {
		_spec.SetField(node.FieldLicenses, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedLicenses(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldLicenses, value)
		})
	}
	if value, ok := nu.mutation.LicenseConcluded(); ok {
		_spec.SetField(node.FieldLicenseConcluded, field.TypeString, value)
	}
	if value, ok := nu.mutation.LicenseComments(); ok {
		_spec.SetField(node.FieldLicenseComments, field.TypeString, value)
	}
	if value, ok := nu.mutation.Copyright(); ok {
		_spec.SetField(node.FieldCopyright, field.TypeString, value)
	}
	if value, ok := nu.mutation.SourceInfo(); ok {
		_spec.SetField(node.FieldSourceInfo, field.TypeString, value)
	}
	if value, ok := nu.mutation.Comment(); ok {
		_spec.SetField(node.FieldComment, field.TypeString, value)
	}
	if value, ok := nu.mutation.Summary(); ok {
		_spec.SetField(node.FieldSummary, field.TypeString, value)
	}
	if value, ok := nu.mutation.Description(); ok {
		_spec.SetField(node.FieldDescription, field.TypeString, value)
	}
	if value, ok := nu.mutation.ReleaseDate(); ok {
		_spec.SetField(node.FieldReleaseDate, field.TypeTime, value)
	}
	if value, ok := nu.mutation.BuildDate(); ok {
		_spec.SetField(node.FieldBuildDate, field.TypeTime, value)
	}
	if value, ok := nu.mutation.ValidUntilDate(); ok {
		_spec.SetField(node.FieldValidUntilDate, field.TypeTime, value)
	}
	if value, ok := nu.mutation.Attribution(); ok {
		_spec.SetField(node.FieldAttribution, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedAttribution(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldAttribution, value)
		})
	}
	if value, ok := nu.mutation.FileTypes(); ok {
		_spec.SetField(node.FieldFileTypes, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedFileTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldFileTypes, value)
		})
	}
	if value, ok := nu.mutation.Suppliers(); ok {
		_spec.SetField(node.FieldSuppliers, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedSuppliers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldSuppliers, value)
		})
	}
	if value, ok := nu.mutation.Originators(); ok {
		_spec.SetField(node.FieldOriginators, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedOriginators(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldOriginators, value)
		})
	}
	if value, ok := nu.mutation.ExternalReferences(); ok {
		_spec.SetField(node.FieldExternalReferences, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedExternalReferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldExternalReferences, value)
		})
	}
	if value, ok := nu.mutation.Hashes(); ok {
		_spec.SetField(node.FieldHashes, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.Identifiers(); ok {
		_spec.SetField(node.FieldIdentifiers, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.PrimaryPurpose(); ok {
		_spec.SetField(node.FieldPrimaryPurpose, field.TypeJSON, value)
	}
	if value, ok := nu.mutation.AppendedPrimaryPurpose(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldPrimaryPurpose, value)
		})
	}
	if nu.mutation.NodeSuppliersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeSuppliersTable,
			Columns: []string{node.NodeSuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedNodeSuppliersIDs(); len(nodes) > 0 && !nu.mutation.NodeSuppliersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeSuppliersTable,
			Columns: []string{node.NodeSuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NodeSuppliersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeSuppliersTable,
			Columns: []string{node.NodeSuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.NodeOriginatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeOriginatorsTable,
			Columns: []string{node.NodeOriginatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedNodeOriginatorsIDs(); len(nodes) > 0 && !nu.mutation.NodeOriginatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeOriginatorsTable,
			Columns: []string{node.NodeOriginatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NodeOriginatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeOriginatorsTable,
			Columns: []string{node.NodeOriginatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.NodeExternalReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeExternalReferencesTable,
			Columns: []string{node.NodeExternalReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedNodeExternalReferencesIDs(); len(nodes) > 0 && !nu.mutation.NodeExternalReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeExternalReferencesTable,
			Columns: []string{node.NodeExternalReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NodeExternalReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeExternalReferencesTable,
			Columns: []string{node.NodeExternalReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.NodeIdentifiersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeIdentifiersTable,
			Columns: []string{node.NodeIdentifiersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identifiersentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedNodeIdentifiersIDs(); len(nodes) > 0 && !nu.mutation.NodeIdentifiersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeIdentifiersTable,
			Columns: []string{node.NodeIdentifiersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identifiersentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NodeIdentifiersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeIdentifiersTable,
			Columns: []string{node.NodeIdentifiersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identifiersentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.NodeHashesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeHashesTable,
			Columns: []string{node.NodeHashesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashesentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedNodeHashesIDs(); len(nodes) > 0 && !nu.mutation.NodeHashesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeHashesTable,
			Columns: []string{node.NodeHashesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashesentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NodeHashesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeHashesTable,
			Columns: []string{node.NodeHashesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashesentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.NodePrimaryPurposeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.NodePrimaryPurposeTable,
			Columns: node.NodePrimaryPurposePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purpose.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedNodePrimaryPurposeIDs(); len(nodes) > 0 && !nu.mutation.NodePrimaryPurposeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.NodePrimaryPurposeTable,
			Columns: node.NodePrimaryPurposePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purpose.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NodePrimaryPurposeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.NodePrimaryPurposeTable,
			Columns: node.NodePrimaryPurposePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purpose.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.NodesTable,
			Columns: node.NodesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedNodesIDs(); len(nodes) > 0 && !nu.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.NodesTable,
			Columns: node.NodesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.NodesTable,
			Columns: node.NodesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.NodeListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   node.NodeListTable,
			Columns: []string{node.NodeListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodelist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.NodeListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   node.NodeListTable,
			Columns: []string{node.NodeListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodelist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nu.mutation.EdgeTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   node.EdgeTypesTable,
			Columns: []string{node.EdgeTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(edgetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedEdgeTypesIDs(); len(nodes) > 0 && !nu.mutation.EdgeTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   node.EdgeTypesTable,
			Columns: []string{node.EdgeTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(edgetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.EdgeTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   node.EdgeTypesTable,
			Columns: []string{node.EdgeTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(edgetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{node.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	nu.mutation.done = true
	return n, nil
}

// NodeUpdateOne is the builder for updating a single Node entity.
type NodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NodeMutation
}

// SetType sets the "type" field.
func (nuo *NodeUpdateOne) SetType(n node.Type) *NodeUpdateOne {
	nuo.mutation.SetType(n)
	return nuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableType(n *node.Type) *NodeUpdateOne {
	if n != nil {
		nuo.SetType(*n)
	}
	return nuo
}

// SetName sets the "name" field.
func (nuo *NodeUpdateOne) SetName(s string) *NodeUpdateOne {
	nuo.mutation.SetName(s)
	return nuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableName(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetName(*s)
	}
	return nuo
}

// SetVersion sets the "version" field.
func (nuo *NodeUpdateOne) SetVersion(s string) *NodeUpdateOne {
	nuo.mutation.SetVersion(s)
	return nuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableVersion(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetVersion(*s)
	}
	return nuo
}

// SetFileName sets the "file_name" field.
func (nuo *NodeUpdateOne) SetFileName(s string) *NodeUpdateOne {
	nuo.mutation.SetFileName(s)
	return nuo
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableFileName(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetFileName(*s)
	}
	return nuo
}

// SetURLHome sets the "url_home" field.
func (nuo *NodeUpdateOne) SetURLHome(s string) *NodeUpdateOne {
	nuo.mutation.SetURLHome(s)
	return nuo
}

// SetNillableURLHome sets the "url_home" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableURLHome(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetURLHome(*s)
	}
	return nuo
}

// SetURLDownload sets the "url_download" field.
func (nuo *NodeUpdateOne) SetURLDownload(s string) *NodeUpdateOne {
	nuo.mutation.SetURLDownload(s)
	return nuo
}

// SetNillableURLDownload sets the "url_download" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableURLDownload(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetURLDownload(*s)
	}
	return nuo
}

// SetLicenses sets the "licenses" field.
func (nuo *NodeUpdateOne) SetLicenses(s []string) *NodeUpdateOne {
	nuo.mutation.SetLicenses(s)
	return nuo
}

// AppendLicenses appends s to the "licenses" field.
func (nuo *NodeUpdateOne) AppendLicenses(s []string) *NodeUpdateOne {
	nuo.mutation.AppendLicenses(s)
	return nuo
}

// SetLicenseConcluded sets the "license_concluded" field.
func (nuo *NodeUpdateOne) SetLicenseConcluded(s string) *NodeUpdateOne {
	nuo.mutation.SetLicenseConcluded(s)
	return nuo
}

// SetNillableLicenseConcluded sets the "license_concluded" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableLicenseConcluded(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetLicenseConcluded(*s)
	}
	return nuo
}

// SetLicenseComments sets the "license_comments" field.
func (nuo *NodeUpdateOne) SetLicenseComments(s string) *NodeUpdateOne {
	nuo.mutation.SetLicenseComments(s)
	return nuo
}

// SetNillableLicenseComments sets the "license_comments" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableLicenseComments(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetLicenseComments(*s)
	}
	return nuo
}

// SetCopyright sets the "copyright" field.
func (nuo *NodeUpdateOne) SetCopyright(s string) *NodeUpdateOne {
	nuo.mutation.SetCopyright(s)
	return nuo
}

// SetNillableCopyright sets the "copyright" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableCopyright(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetCopyright(*s)
	}
	return nuo
}

// SetSourceInfo sets the "source_info" field.
func (nuo *NodeUpdateOne) SetSourceInfo(s string) *NodeUpdateOne {
	nuo.mutation.SetSourceInfo(s)
	return nuo
}

// SetNillableSourceInfo sets the "source_info" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableSourceInfo(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetSourceInfo(*s)
	}
	return nuo
}

// SetComment sets the "comment" field.
func (nuo *NodeUpdateOne) SetComment(s string) *NodeUpdateOne {
	nuo.mutation.SetComment(s)
	return nuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableComment(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetComment(*s)
	}
	return nuo
}

// SetSummary sets the "summary" field.
func (nuo *NodeUpdateOne) SetSummary(s string) *NodeUpdateOne {
	nuo.mutation.SetSummary(s)
	return nuo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableSummary(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetSummary(*s)
	}
	return nuo
}

// SetDescription sets the "description" field.
func (nuo *NodeUpdateOne) SetDescription(s string) *NodeUpdateOne {
	nuo.mutation.SetDescription(s)
	return nuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableDescription(s *string) *NodeUpdateOne {
	if s != nil {
		nuo.SetDescription(*s)
	}
	return nuo
}

// SetReleaseDate sets the "release_date" field.
func (nuo *NodeUpdateOne) SetReleaseDate(t time.Time) *NodeUpdateOne {
	nuo.mutation.SetReleaseDate(t)
	return nuo
}

// SetNillableReleaseDate sets the "release_date" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableReleaseDate(t *time.Time) *NodeUpdateOne {
	if t != nil {
		nuo.SetReleaseDate(*t)
	}
	return nuo
}

// SetBuildDate sets the "build_date" field.
func (nuo *NodeUpdateOne) SetBuildDate(t time.Time) *NodeUpdateOne {
	nuo.mutation.SetBuildDate(t)
	return nuo
}

// SetNillableBuildDate sets the "build_date" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableBuildDate(t *time.Time) *NodeUpdateOne {
	if t != nil {
		nuo.SetBuildDate(*t)
	}
	return nuo
}

// SetValidUntilDate sets the "valid_until_date" field.
func (nuo *NodeUpdateOne) SetValidUntilDate(t time.Time) *NodeUpdateOne {
	nuo.mutation.SetValidUntilDate(t)
	return nuo
}

// SetNillableValidUntilDate sets the "valid_until_date" field if the given value is not nil.
func (nuo *NodeUpdateOne) SetNillableValidUntilDate(t *time.Time) *NodeUpdateOne {
	if t != nil {
		nuo.SetValidUntilDate(*t)
	}
	return nuo
}

// SetAttribution sets the "attribution" field.
func (nuo *NodeUpdateOne) SetAttribution(s []string) *NodeUpdateOne {
	nuo.mutation.SetAttribution(s)
	return nuo
}

// AppendAttribution appends s to the "attribution" field.
func (nuo *NodeUpdateOne) AppendAttribution(s []string) *NodeUpdateOne {
	nuo.mutation.AppendAttribution(s)
	return nuo
}

// SetFileTypes sets the "file_types" field.
func (nuo *NodeUpdateOne) SetFileTypes(s []string) *NodeUpdateOne {
	nuo.mutation.SetFileTypes(s)
	return nuo
}

// AppendFileTypes appends s to the "file_types" field.
func (nuo *NodeUpdateOne) AppendFileTypes(s []string) *NodeUpdateOne {
	nuo.mutation.AppendFileTypes(s)
	return nuo
}

// SetSuppliers sets the "suppliers" field.
func (nuo *NodeUpdateOne) SetSuppliers(s []*sbom.Person) *NodeUpdateOne {
	nuo.mutation.SetSuppliers(s)
	return nuo
}

// AppendSuppliers appends s to the "suppliers" field.
func (nuo *NodeUpdateOne) AppendSuppliers(s []*sbom.Person) *NodeUpdateOne {
	nuo.mutation.AppendSuppliers(s)
	return nuo
}

// SetOriginators sets the "originators" field.
func (nuo *NodeUpdateOne) SetOriginators(s []*sbom.Person) *NodeUpdateOne {
	nuo.mutation.SetOriginators(s)
	return nuo
}

// AppendOriginators appends s to the "originators" field.
func (nuo *NodeUpdateOne) AppendOriginators(s []*sbom.Person) *NodeUpdateOne {
	nuo.mutation.AppendOriginators(s)
	return nuo
}

// SetExternalReferences sets the "external_references" field.
func (nuo *NodeUpdateOne) SetExternalReferences(sr []*sbom.ExternalReference) *NodeUpdateOne {
	nuo.mutation.SetExternalReferences(sr)
	return nuo
}

// AppendExternalReferences appends sr to the "external_references" field.
func (nuo *NodeUpdateOne) AppendExternalReferences(sr []*sbom.ExternalReference) *NodeUpdateOne {
	nuo.mutation.AppendExternalReferences(sr)
	return nuo
}

// SetHashes sets the "hashes" field.
func (nuo *NodeUpdateOne) SetHashes(m map[int32]string) *NodeUpdateOne {
	nuo.mutation.SetHashes(m)
	return nuo
}

// SetIdentifiers sets the "identifiers" field.
func (nuo *NodeUpdateOne) SetIdentifiers(m map[int32]string) *NodeUpdateOne {
	nuo.mutation.SetIdentifiers(m)
	return nuo
}

// SetPrimaryPurpose sets the "primary_purpose" field.
func (nuo *NodeUpdateOne) SetPrimaryPurpose(s []sbom.Purpose) *NodeUpdateOne {
	nuo.mutation.SetPrimaryPurpose(s)
	return nuo
}

// AppendPrimaryPurpose appends s to the "primary_purpose" field.
func (nuo *NodeUpdateOne) AppendPrimaryPurpose(s []sbom.Purpose) *NodeUpdateOne {
	nuo.mutation.AppendPrimaryPurpose(s)
	return nuo
}

// AddNodeSupplierIDs adds the "node_suppliers" edge to the Person entity by IDs.
func (nuo *NodeUpdateOne) AddNodeSupplierIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.AddNodeSupplierIDs(ids...)
	return nuo
}

// AddNodeSuppliers adds the "node_suppliers" edges to the Person entity.
func (nuo *NodeUpdateOne) AddNodeSuppliers(p ...*Person) *NodeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.AddNodeSupplierIDs(ids...)
}

// AddNodeOriginatorIDs adds the "node_originators" edge to the Person entity by IDs.
func (nuo *NodeUpdateOne) AddNodeOriginatorIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.AddNodeOriginatorIDs(ids...)
	return nuo
}

// AddNodeOriginators adds the "node_originators" edges to the Person entity.
func (nuo *NodeUpdateOne) AddNodeOriginators(p ...*Person) *NodeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.AddNodeOriginatorIDs(ids...)
}

// AddNodeExternalReferenceIDs adds the "node_external_references" edge to the ExternalReference entity by IDs.
func (nuo *NodeUpdateOne) AddNodeExternalReferenceIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.AddNodeExternalReferenceIDs(ids...)
	return nuo
}

// AddNodeExternalReferences adds the "node_external_references" edges to the ExternalReference entity.
func (nuo *NodeUpdateOne) AddNodeExternalReferences(e ...*ExternalReference) *NodeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nuo.AddNodeExternalReferenceIDs(ids...)
}

// AddNodeIdentifierIDs adds the "node_identifiers" edge to the IdentifiersEntry entity by IDs.
func (nuo *NodeUpdateOne) AddNodeIdentifierIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.AddNodeIdentifierIDs(ids...)
	return nuo
}

// AddNodeIdentifiers adds the "node_identifiers" edges to the IdentifiersEntry entity.
func (nuo *NodeUpdateOne) AddNodeIdentifiers(i ...*IdentifiersEntry) *NodeUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nuo.AddNodeIdentifierIDs(ids...)
}

// AddNodeHashIDs adds the "node_hashes" edge to the HashesEntry entity by IDs.
func (nuo *NodeUpdateOne) AddNodeHashIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.AddNodeHashIDs(ids...)
	return nuo
}

// AddNodeHashes adds the "node_hashes" edges to the HashesEntry entity.
func (nuo *NodeUpdateOne) AddNodeHashes(h ...*HashesEntry) *NodeUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return nuo.AddNodeHashIDs(ids...)
}

// AddNodePrimaryPurposeIDs adds the "node_primary_purpose" edge to the Purpose entity by IDs.
func (nuo *NodeUpdateOne) AddNodePrimaryPurposeIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.AddNodePrimaryPurposeIDs(ids...)
	return nuo
}

// AddNodePrimaryPurpose adds the "node_primary_purpose" edges to the Purpose entity.
func (nuo *NodeUpdateOne) AddNodePrimaryPurpose(p ...*Purpose) *NodeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.AddNodePrimaryPurposeIDs(ids...)
}

// AddNodeIDs adds the "nodes" edge to the Node entity by IDs.
func (nuo *NodeUpdateOne) AddNodeIDs(ids ...string) *NodeUpdateOne {
	nuo.mutation.AddNodeIDs(ids...)
	return nuo
}

// AddNodes adds the "nodes" edges to the Node entity.
func (nuo *NodeUpdateOne) AddNodes(n ...*Node) *NodeUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.AddNodeIDs(ids...)
}

// SetNodeListID sets the "node_list" edge to the NodeList entity by ID.
func (nuo *NodeUpdateOne) SetNodeListID(id int) *NodeUpdateOne {
	nuo.mutation.SetNodeListID(id)
	return nuo
}

// SetNodeList sets the "node_list" edge to the NodeList entity.
func (nuo *NodeUpdateOne) SetNodeList(n *NodeList) *NodeUpdateOne {
	return nuo.SetNodeListID(n.ID)
}

// AddEdgeTypeIDs adds the "edge_types" edge to the EdgeType entity by IDs.
func (nuo *NodeUpdateOne) AddEdgeTypeIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.AddEdgeTypeIDs(ids...)
	return nuo
}

// AddEdgeTypes adds the "edge_types" edges to the EdgeType entity.
func (nuo *NodeUpdateOne) AddEdgeTypes(e ...*EdgeType) *NodeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nuo.AddEdgeTypeIDs(ids...)
}

// Mutation returns the NodeMutation object of the builder.
func (nuo *NodeUpdateOne) Mutation() *NodeMutation {
	return nuo.mutation
}

// ClearNodeSuppliers clears all "node_suppliers" edges to the Person entity.
func (nuo *NodeUpdateOne) ClearNodeSuppliers() *NodeUpdateOne {
	nuo.mutation.ClearNodeSuppliers()
	return nuo
}

// RemoveNodeSupplierIDs removes the "node_suppliers" edge to Person entities by IDs.
func (nuo *NodeUpdateOne) RemoveNodeSupplierIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.RemoveNodeSupplierIDs(ids...)
	return nuo
}

// RemoveNodeSuppliers removes "node_suppliers" edges to Person entities.
func (nuo *NodeUpdateOne) RemoveNodeSuppliers(p ...*Person) *NodeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.RemoveNodeSupplierIDs(ids...)
}

// ClearNodeOriginators clears all "node_originators" edges to the Person entity.
func (nuo *NodeUpdateOne) ClearNodeOriginators() *NodeUpdateOne {
	nuo.mutation.ClearNodeOriginators()
	return nuo
}

// RemoveNodeOriginatorIDs removes the "node_originators" edge to Person entities by IDs.
func (nuo *NodeUpdateOne) RemoveNodeOriginatorIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.RemoveNodeOriginatorIDs(ids...)
	return nuo
}

// RemoveNodeOriginators removes "node_originators" edges to Person entities.
func (nuo *NodeUpdateOne) RemoveNodeOriginators(p ...*Person) *NodeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.RemoveNodeOriginatorIDs(ids...)
}

// ClearNodeExternalReferences clears all "node_external_references" edges to the ExternalReference entity.
func (nuo *NodeUpdateOne) ClearNodeExternalReferences() *NodeUpdateOne {
	nuo.mutation.ClearNodeExternalReferences()
	return nuo
}

// RemoveNodeExternalReferenceIDs removes the "node_external_references" edge to ExternalReference entities by IDs.
func (nuo *NodeUpdateOne) RemoveNodeExternalReferenceIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.RemoveNodeExternalReferenceIDs(ids...)
	return nuo
}

// RemoveNodeExternalReferences removes "node_external_references" edges to ExternalReference entities.
func (nuo *NodeUpdateOne) RemoveNodeExternalReferences(e ...*ExternalReference) *NodeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nuo.RemoveNodeExternalReferenceIDs(ids...)
}

// ClearNodeIdentifiers clears all "node_identifiers" edges to the IdentifiersEntry entity.
func (nuo *NodeUpdateOne) ClearNodeIdentifiers() *NodeUpdateOne {
	nuo.mutation.ClearNodeIdentifiers()
	return nuo
}

// RemoveNodeIdentifierIDs removes the "node_identifiers" edge to IdentifiersEntry entities by IDs.
func (nuo *NodeUpdateOne) RemoveNodeIdentifierIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.RemoveNodeIdentifierIDs(ids...)
	return nuo
}

// RemoveNodeIdentifiers removes "node_identifiers" edges to IdentifiersEntry entities.
func (nuo *NodeUpdateOne) RemoveNodeIdentifiers(i ...*IdentifiersEntry) *NodeUpdateOne {
	ids := make([]int, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return nuo.RemoveNodeIdentifierIDs(ids...)
}

// ClearNodeHashes clears all "node_hashes" edges to the HashesEntry entity.
func (nuo *NodeUpdateOne) ClearNodeHashes() *NodeUpdateOne {
	nuo.mutation.ClearNodeHashes()
	return nuo
}

// RemoveNodeHashIDs removes the "node_hashes" edge to HashesEntry entities by IDs.
func (nuo *NodeUpdateOne) RemoveNodeHashIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.RemoveNodeHashIDs(ids...)
	return nuo
}

// RemoveNodeHashes removes "node_hashes" edges to HashesEntry entities.
func (nuo *NodeUpdateOne) RemoveNodeHashes(h ...*HashesEntry) *NodeUpdateOne {
	ids := make([]int, len(h))
	for i := range h {
		ids[i] = h[i].ID
	}
	return nuo.RemoveNodeHashIDs(ids...)
}

// ClearNodePrimaryPurpose clears all "node_primary_purpose" edges to the Purpose entity.
func (nuo *NodeUpdateOne) ClearNodePrimaryPurpose() *NodeUpdateOne {
	nuo.mutation.ClearNodePrimaryPurpose()
	return nuo
}

// RemoveNodePrimaryPurposeIDs removes the "node_primary_purpose" edge to Purpose entities by IDs.
func (nuo *NodeUpdateOne) RemoveNodePrimaryPurposeIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.RemoveNodePrimaryPurposeIDs(ids...)
	return nuo
}

// RemoveNodePrimaryPurpose removes "node_primary_purpose" edges to Purpose entities.
func (nuo *NodeUpdateOne) RemoveNodePrimaryPurpose(p ...*Purpose) *NodeUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return nuo.RemoveNodePrimaryPurposeIDs(ids...)
}

// ClearNodes clears all "nodes" edges to the Node entity.
func (nuo *NodeUpdateOne) ClearNodes() *NodeUpdateOne {
	nuo.mutation.ClearNodes()
	return nuo
}

// RemoveNodeIDs removes the "nodes" edge to Node entities by IDs.
func (nuo *NodeUpdateOne) RemoveNodeIDs(ids ...string) *NodeUpdateOne {
	nuo.mutation.RemoveNodeIDs(ids...)
	return nuo
}

// RemoveNodes removes "nodes" edges to Node entities.
func (nuo *NodeUpdateOne) RemoveNodes(n ...*Node) *NodeUpdateOne {
	ids := make([]string, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return nuo.RemoveNodeIDs(ids...)
}

// ClearNodeList clears the "node_list" edge to the NodeList entity.
func (nuo *NodeUpdateOne) ClearNodeList() *NodeUpdateOne {
	nuo.mutation.ClearNodeList()
	return nuo
}

// ClearEdgeTypes clears all "edge_types" edges to the EdgeType entity.
func (nuo *NodeUpdateOne) ClearEdgeTypes() *NodeUpdateOne {
	nuo.mutation.ClearEdgeTypes()
	return nuo
}

// RemoveEdgeTypeIDs removes the "edge_types" edge to EdgeType entities by IDs.
func (nuo *NodeUpdateOne) RemoveEdgeTypeIDs(ids ...int) *NodeUpdateOne {
	nuo.mutation.RemoveEdgeTypeIDs(ids...)
	return nuo
}

// RemoveEdgeTypes removes "edge_types" edges to EdgeType entities.
func (nuo *NodeUpdateOne) RemoveEdgeTypes(e ...*EdgeType) *NodeUpdateOne {
	ids := make([]int, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return nuo.RemoveEdgeTypeIDs(ids...)
}

// Where appends a list predicates to the NodeUpdate builder.
func (nuo *NodeUpdateOne) Where(ps ...predicate.Node) *NodeUpdateOne {
	nuo.mutation.Where(ps...)
	return nuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NodeUpdateOne) Select(field string, fields ...string) *NodeUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Node entity.
func (nuo *NodeUpdateOne) Save(ctx context.Context) (*Node, error) {
	return withHooks(ctx, nuo.sqlSave, nuo.mutation, nuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NodeUpdateOne) SaveX(ctx context.Context) *Node {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NodeUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NodeUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NodeUpdateOne) check() error {
	if v, ok := nuo.mutation.GetType(); ok {
		if err := node.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Node.type": %w`, err)}
		}
	}
	if _, ok := nuo.mutation.NodeListID(); nuo.mutation.NodeListCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Node.node_list"`)
	}
	return nil
}

func (nuo *NodeUpdateOne) sqlSave(ctx context.Context) (_node *Node, err error) {
	if err := nuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(node.Table, node.Columns, sqlgraph.NewFieldSpec(node.FieldID, field.TypeString))
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Node.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, node.FieldID)
		for _, f := range fields {
			if !node.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != node.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.GetType(); ok {
		_spec.SetField(node.FieldType, field.TypeEnum, value)
	}
	if value, ok := nuo.mutation.Name(); ok {
		_spec.SetField(node.FieldName, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Version(); ok {
		_spec.SetField(node.FieldVersion, field.TypeString, value)
	}
	if value, ok := nuo.mutation.FileName(); ok {
		_spec.SetField(node.FieldFileName, field.TypeString, value)
	}
	if value, ok := nuo.mutation.URLHome(); ok {
		_spec.SetField(node.FieldURLHome, field.TypeString, value)
	}
	if value, ok := nuo.mutation.URLDownload(); ok {
		_spec.SetField(node.FieldURLDownload, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Licenses(); ok {
		_spec.SetField(node.FieldLicenses, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedLicenses(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldLicenses, value)
		})
	}
	if value, ok := nuo.mutation.LicenseConcluded(); ok {
		_spec.SetField(node.FieldLicenseConcluded, field.TypeString, value)
	}
	if value, ok := nuo.mutation.LicenseComments(); ok {
		_spec.SetField(node.FieldLicenseComments, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Copyright(); ok {
		_spec.SetField(node.FieldCopyright, field.TypeString, value)
	}
	if value, ok := nuo.mutation.SourceInfo(); ok {
		_spec.SetField(node.FieldSourceInfo, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Comment(); ok {
		_spec.SetField(node.FieldComment, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Summary(); ok {
		_spec.SetField(node.FieldSummary, field.TypeString, value)
	}
	if value, ok := nuo.mutation.Description(); ok {
		_spec.SetField(node.FieldDescription, field.TypeString, value)
	}
	if value, ok := nuo.mutation.ReleaseDate(); ok {
		_spec.SetField(node.FieldReleaseDate, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.BuildDate(); ok {
		_spec.SetField(node.FieldBuildDate, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.ValidUntilDate(); ok {
		_spec.SetField(node.FieldValidUntilDate, field.TypeTime, value)
	}
	if value, ok := nuo.mutation.Attribution(); ok {
		_spec.SetField(node.FieldAttribution, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedAttribution(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldAttribution, value)
		})
	}
	if value, ok := nuo.mutation.FileTypes(); ok {
		_spec.SetField(node.FieldFileTypes, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedFileTypes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldFileTypes, value)
		})
	}
	if value, ok := nuo.mutation.Suppliers(); ok {
		_spec.SetField(node.FieldSuppliers, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedSuppliers(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldSuppliers, value)
		})
	}
	if value, ok := nuo.mutation.Originators(); ok {
		_spec.SetField(node.FieldOriginators, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedOriginators(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldOriginators, value)
		})
	}
	if value, ok := nuo.mutation.ExternalReferences(); ok {
		_spec.SetField(node.FieldExternalReferences, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedExternalReferences(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldExternalReferences, value)
		})
	}
	if value, ok := nuo.mutation.Hashes(); ok {
		_spec.SetField(node.FieldHashes, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.Identifiers(); ok {
		_spec.SetField(node.FieldIdentifiers, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.PrimaryPurpose(); ok {
		_spec.SetField(node.FieldPrimaryPurpose, field.TypeJSON, value)
	}
	if value, ok := nuo.mutation.AppendedPrimaryPurpose(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, node.FieldPrimaryPurpose, value)
		})
	}
	if nuo.mutation.NodeSuppliersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeSuppliersTable,
			Columns: []string{node.NodeSuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedNodeSuppliersIDs(); len(nodes) > 0 && !nuo.mutation.NodeSuppliersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeSuppliersTable,
			Columns: []string{node.NodeSuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NodeSuppliersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeSuppliersTable,
			Columns: []string{node.NodeSuppliersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.NodeOriginatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeOriginatorsTable,
			Columns: []string{node.NodeOriginatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedNodeOriginatorsIDs(); len(nodes) > 0 && !nuo.mutation.NodeOriginatorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeOriginatorsTable,
			Columns: []string{node.NodeOriginatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NodeOriginatorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeOriginatorsTable,
			Columns: []string{node.NodeOriginatorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.NodeExternalReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeExternalReferencesTable,
			Columns: []string{node.NodeExternalReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedNodeExternalReferencesIDs(); len(nodes) > 0 && !nuo.mutation.NodeExternalReferencesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeExternalReferencesTable,
			Columns: []string{node.NodeExternalReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NodeExternalReferencesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeExternalReferencesTable,
			Columns: []string{node.NodeExternalReferencesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(externalreference.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.NodeIdentifiersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeIdentifiersTable,
			Columns: []string{node.NodeIdentifiersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identifiersentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedNodeIdentifiersIDs(); len(nodes) > 0 && !nuo.mutation.NodeIdentifiersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeIdentifiersTable,
			Columns: []string{node.NodeIdentifiersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identifiersentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NodeIdentifiersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeIdentifiersTable,
			Columns: []string{node.NodeIdentifiersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(identifiersentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.NodeHashesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeHashesTable,
			Columns: []string{node.NodeHashesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashesentry.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedNodeHashesIDs(); len(nodes) > 0 && !nuo.mutation.NodeHashesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeHashesTable,
			Columns: []string{node.NodeHashesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashesentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NodeHashesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   node.NodeHashesTable,
			Columns: []string{node.NodeHashesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(hashesentry.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.NodePrimaryPurposeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.NodePrimaryPurposeTable,
			Columns: node.NodePrimaryPurposePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purpose.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedNodePrimaryPurposeIDs(); len(nodes) > 0 && !nuo.mutation.NodePrimaryPurposeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.NodePrimaryPurposeTable,
			Columns: node.NodePrimaryPurposePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purpose.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NodePrimaryPurposeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.NodePrimaryPurposeTable,
			Columns: node.NodePrimaryPurposePrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(purpose.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.NodesTable,
			Columns: node.NodesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedNodesIDs(); len(nodes) > 0 && !nuo.mutation.NodesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.NodesTable,
			Columns: node.NodesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NodesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   node.NodesTable,
			Columns: node.NodesPrimaryKey,
			Bidi:    true,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(node.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.NodeListCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   node.NodeListTable,
			Columns: []string{node.NodeListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodelist.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.NodeListIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   node.NodeListTable,
			Columns: []string{node.NodeListColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nodelist.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nuo.mutation.EdgeTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   node.EdgeTypesTable,
			Columns: []string{node.EdgeTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(edgetype.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedEdgeTypesIDs(); len(nodes) > 0 && !nuo.mutation.EdgeTypesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   node.EdgeTypesTable,
			Columns: []string{node.EdgeTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(edgetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.EdgeTypesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   node.EdgeTypesTable,
			Columns: []string{node.EdgeTypesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(edgetype.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Node{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{node.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	nuo.mutation.done = true
	return _node, nil
}
